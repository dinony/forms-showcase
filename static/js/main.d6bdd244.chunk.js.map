{"version":3,"sources":["components/asyncComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["asyncComponent","importComponent","_React$Component","AsyncComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","component","undefined","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","_ref","wrap","_context","prev","next","sent","AsyncPage","setState","stop","apply","arguments","C","react_default","createElement","React","Component","asyncApi","Promise","all","__webpack_require__","e","then","bind","asyncComponents","asyncHome","asyncNotFound","App","toggle","isOpen","react","HashRouter","className","Navbar","dark","color","expand","fixed","NavbarBrand","tag","Link","to","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","href","Switch","Route","path","exact","Boolean","window","location","hostname","match","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d6bdd244.chunk.js","sourcesContent":["import React from 'react';\n\n// tslint:disable-next-line:no-reserved-keywords\ntype TComponentLoader =  (() => Promise<{ AsyncPage: React.ComponentType }>);\n\n// tslint:disable-next-line:naming-convention\nexport const asyncComponent = (importComponent: TComponentLoader): React.ComponentType => {\n  interface IAsyncComponentState {\n    component?: React.ComponentType;\n  }\n\n  class AsyncComponent extends React.Component<{}, IAsyncComponentState> {\n    constructor(props: {}) {\n      super(props);\n\n      this.state = {\n        component: undefined,\n      };\n    }\n\n    public async componentDidMount(): Promise<void> {\n      const { AsyncPage: component } = await importComponent();\n\n      this.setState({\n        component: component,\n      });\n    }\n\n    public render(): JSX.Element | null {\n      // tslint:disable-next-line:naming-convention\n      const C = this.state.component;\n\n      return C ? <C {...this.props} /> : null;\n    }\n  }\n\n  return AsyncComponent;\n};\n","import * as React from 'react';\nimport { HashRouter, Link, Route, Switch } from 'react-router-dom';\nimport { Collapse, Nav, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\n\n// tslint:disable-next-line:no-import-side-effect\nimport 'babel-polyfill';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'react-datetime/css/react-datetime.css';\n\nimport { asyncComponent } from './components/asyncComponent';\n\nconst asyncApi = asyncComponent(() => import('./views/api'));\nconst asyncComponents = asyncComponent(() => import('./views/components'));\nconst asyncHome = asyncComponent(() => import('./views/home'));\nconst asyncNotFound = asyncComponent(() => import('./views/not-found'));\n\ninterface IAppState {\n  isOpen: boolean;\n}\n\nexport class App extends React.Component<{}, IAppState> {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      isOpen: false,\n    };\n  }\n\n  private toggle = (): void => {\n    this.setState({\n      isOpen: !this.state.isOpen,\n    });\n  }\n\n  // tslint:disable-next-line:member-ordering\n  public render(): JSX.Element {\n    return (\n      <HashRouter>\n        <div className=\"App\">\n          <Navbar dark color=\"dark\" expand=\"md\" fixed=\"top\">\n            <NavbarBrand tag={Link} to=\"/\">Ocean Forms</NavbarBrand>\n            <NavbarToggler onClick={this.toggle} />\n            <Collapse isOpen={this.state.isOpen} navbar>\n              <Nav className=\"ml-auto\" navbar>\n                <NavItem>\n                  <NavLink tag={Link} to=\"/components\">Components</NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink tag={Link} to=\"/api\">API</NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink href=\"https://github.com/environment-agency-austria/react-ocean-forms\">GitHub</NavLink>\n                </NavItem>\n              </Nav>\n            </Collapse>\n          </Navbar>\n\n          <div className=\"content container\">\n              <Switch>\n                <Route path=\"/\" exact component={asyncHome} />\n                <Route path=\"/components\" component={asyncComponents} />\n                <Route path=\"/api\" component={asyncApi} />\n                <Route path=\"*\" component={asyncNotFound} />\n              </Switch>\n          </div>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './index.css';\nimport { unregister } from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement,\n);\n\nunregister();\n"],"sourceRoot":""}