{"version":3,"sources":["../node_modules/refractor/lang/erb.js","../node_modules/refractor/lang/ruby.js"],"names":["refractorRuby","__webpack_require__","erb","Prism","register","languages","extend","insertBefore","delimiter","pattern","alias","hooks","add","env","buildPlaceholders","tokenizePlaceholders","module","exports","displayName","aliases","ruby","comment","greedy","keyword","interpolation","inside","rest","regex","lookbehind","variable","symbol","builtin","constant","string"],"mappings":"+FAEA,IAAAA,EAAoBC,EAAQ,IAM5B,SAAAC,EAAAC,GACAA,EAAAC,SAAAJ,GAEA,SAAAG,GACAA,EAAAE,UAAAH,IAAAC,EAAAE,UAAAC,OAAA,WACAH,EAAAE,UAAAE,aAAA,iBACAC,UAAA,CACAC,QAAA,YACAC,MAAA,iBAGAP,EAAAQ,MAAAC,IAAA,2BAAAC,GAEAV,EAAAE,UAAA,qBAAAS,kBAAAD,EAAA,MADA,qBAGAV,EAAAQ,MAAAC,IAAA,0BAAAC,GACAV,EAAAE,UAAA,qBAAAU,qBAAAF,EAAA,SAbA,CAeGV,GAtBHa,EAAAC,QAAAf,EACAA,EAAAgB,YAAA,MACAhB,EAAAiB,QAAA,oCCAA,SAAAC,EAAAjB,IASA,SAAAA,GACAA,EAAAE,UAAAe,KAAAjB,EAAAE,UAAAC,OAAA,SACAe,QAAA,QACAZ,QAAA,+CACAa,QAAA,IAEAC,QAAA,yRAEA,IAAAC,EAAA,CACAf,QAAA,aACAgB,OAAA,CACAjB,UAAA,CACAC,QAAA,WACAC,MAAA,OAEAgB,KAAAvB,EAAAE,UAAAe,OAGAjB,EAAAE,UAAAE,aAAA,kBACAoB,MAAA,EACAlB,QAAA,+DACAa,QAAA,EACAG,OAAA,CACAD,kBAEO,CACPf,QAAA,wCACAa,QAAA,EACAG,OAAA,CACAD,kBAEO,CAEPf,QAAA,yDACAa,QAAA,EACAG,OAAA,CACAD,kBAEO,CACPf,QAAA,0CACAa,QAAA,EACAG,OAAA,CACAD,kBAEO,CACPf,QAAA,sCACAa,QAAA,EACAG,OAAA,CACAD,kBAEO,CACPf,QAAA,+EACAmB,YAAA,EACAN,QAAA,IAEAO,SAAA,+BACAC,OAAA,CACArB,QAAA,mCACAmB,YAAA,KAGAzB,EAAAE,UAAAE,aAAA,iBACAwB,QAAA,+OACAC,SAAA,0BAEA7B,EAAAE,UAAAe,KAAAa,OAAA,EACAxB,QAAA,+DACAa,QAAA,EACAG,OAAA,CACAD,kBAEK,CACLf,QAAA,wCACAa,QAAA,EACAG,OAAA,CACAD,kBAEK,CAELf,QAAA,yDACAa,QAAA,EACAG,OAAA,CACAD,kBAEK,CACLf,QAAA,0CACAa,QAAA,EACAG,OAAA,CACAD,kBAEK,CACLf,QAAA,sCACAa,QAAA,EACAG,OAAA,CACAD,kBAEK,CACLf,QAAA,2DACAa,QAAA,EACAG,OAAA,CACAD,mBApGA,CAuGGrB,GApHHa,EAAAC,QAAAG,EACAA,EAAAF,YAAA,OACAE,EAAAD,QAAA","file":"static/js/react-syntax-highlighter_languages_refractor_erb.8b321c4b.chunk.js","sourcesContent":["'use strict';\n\nvar refractorRuby = require('./ruby.js');\n\nmodule.exports = erb;\nerb.displayName = 'erb';\nerb.aliases = [];\n\nfunction erb(Prism) {\n  Prism.register(refractorRuby);\n\n  (function (Prism) {\n    Prism.languages.erb = Prism.languages.extend('ruby', {});\n    Prism.languages.insertBefore('erb', 'comment', {\n      delimiter: {\n        pattern: /^<%=?|%>$/,\n        alias: 'punctuation'\n      }\n    });\n    Prism.hooks.add('before-tokenize', function (env) {\n      var erbPattern = /<%=?[\\s\\S]+?%>/g;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'erb', erbPattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'erb');\n    });\n  })(Prism);\n}","'use strict';\n\nmodule.exports = ruby;\nruby.displayName = 'ruby';\nruby.aliases = [];\n\nfunction ruby(Prism) {\n  /**\n   * Original by Samuel Flores\n   *\n   * Adds the following new token classes:\n   *      constant, builtin, variable, symbol, regex\n   */\n  ;\n\n  (function (Prism) {\n    Prism.languages.ruby = Prism.languages.extend('clike', {\n      comment: [/#.*/, {\n        pattern: /^=begin(?:\\r?\\n|\\r)(?:.*(?:\\r?\\n|\\r))*?=end/m,\n        greedy: true\n      }],\n      keyword: /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/\n    });\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: 'tag'\n        },\n        rest: Prism.languages.ruby\n      }\n    };\n    Prism.languages.insertBefore('ruby', 'keyword', {\n      regex: [{\n        pattern: /%r([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        // Here we need to specifically allow interpolation\n        pattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,\n        lookbehind: true,\n        greedy: true\n      }],\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      symbol: {\n        pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n        lookbehind: true\n      }\n    });\n    Prism.languages.insertBefore('ruby', 'number', {\n      builtin: /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n      constant: /\\b[A-Z]\\w*(?:[?!]|\\b)/\n    });\n    Prism.languages.ruby.string = [{\n      pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      // Here we need to specifically allow interpolation\n      pattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /(\"|')(?:#\\{[^}]+\\}|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }];\n  })(Prism);\n}"],"sourceRoot":""}