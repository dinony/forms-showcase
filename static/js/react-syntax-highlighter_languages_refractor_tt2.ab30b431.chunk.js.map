{"version":3,"sources":["../node_modules/refractor/lang/tt2.js"],"names":["tt2","Prism","languages","extend","comment","pattern","lookbehind","keyword","punctuation","insertBefore","operator","variable","delimiter","alias","single-quoted-string","greedy","double-quoted-string","inside","string","hooks","add","env","buildPlaceholders","tokenizePlaceholders","module","exports","displayName","aliases"],"mappings":"4FAMA,SAAAA,EAAAC,IAGA,SAAAA,GACAA,EAAAC,UAAAF,IAAAC,EAAAC,UAAAC,OAAA,SACAC,QAAA,CACAC,QAAA,sBACAC,YAAA,GAEAC,QAAA,0NACAC,YAAA,sBAEAP,EAAAC,UAAAF,IAAA,gBACAC,EAAAC,UAAAF,IAAA,SACAC,EAAAC,UAAAO,aAAA,gBACAC,SAAA,iDACAC,SAAA,CACAN,QAAA,sDAGAJ,EAAAC,UAAAF,IAAA,UACAC,EAAAC,UAAAO,aAAA,iBACAG,UAAA,CACAP,QAAA,sBACAQ,MAAA,iBAGAZ,EAAAC,UAAAO,aAAA,gBACAK,uBAAA,CACAT,QAAA,gCACAU,QAAA,EACAF,MAAA,UAEAG,uBAAA,CACAX,QAAA,gCACAU,QAAA,EACAF,MAAA,SACAI,OAAA,CACAN,SAAA,CACAN,QAAA,wDAMAJ,EAAAC,UAAAF,IAAAkB,OACAjB,EAAAkB,MAAAC,IAAA,2BAAAC,GAEApB,EAAAC,UAAA,qBAAAoB,kBAAAD,EAAA,MADA,qBAGApB,EAAAkB,MAAAC,IAAA,0BAAAC,GACApB,EAAAC,UAAA,qBAAAqB,qBAAAF,EAAA,SAhDA,CAkDGpB,GAzDHuB,EAAAC,QAAAzB,EACAA,EAAA0B,YAAA,MACA1B,EAAA2B,QAAA","file":"static/js/react-syntax-highlighter_languages_refractor_tt2.ab30b431.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = tt2;\ntt2.displayName = 'tt2';\ntt2.aliases = [];\n\nfunction tt2(Prism) {\n  ;\n\n  (function (Prism) {\n    Prism.languages.tt2 = Prism.languages.extend('clike', {\n      comment: {\n        pattern: /#.*|\\[%#[\\s\\S]*?%\\]/,\n        lookbehind: true\n      },\n      keyword: /\\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|TAGS|THROW|TRY|SWITCH|UNLESS|USE|WHILE|WRAPPER)\\b/,\n      punctuation: /[[\\]{},()]/\n    });\n    delete Prism.languages.tt2['operator'];\n    delete Prism.languages.tt2['variable'];\n    Prism.languages.insertBefore('tt2', 'number', {\n      operator: /=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|or|not)\\b/,\n      variable: {\n        pattern: /[a-z]\\w*(?:\\s*\\.\\s*(?:\\d+|\\$?[a-z]\\w*))*/i\n      }\n    });\n    delete Prism.languages.tt2['delimiter'];\n    Prism.languages.insertBefore('tt2', 'keyword', {\n      delimiter: {\n        pattern: /^(?:\\[%|%%)-?|-?%]$/,\n        alias: 'punctuation'\n      }\n    });\n    Prism.languages.insertBefore('tt2', 'string', {\n      'single-quoted-string': {\n        pattern: /'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'/,\n        greedy: true,\n        alias: 'string'\n      },\n      'double-quoted-string': {\n        pattern: /\"[^\\\\\"]*(?:\\\\[\\s\\S][^\\\\\"]*)*\"/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          variable: {\n            pattern: /\\$(?:[a-z]\\w*(?:\\.(?:\\d+|\\$?[a-z]\\w*))*)/i\n          }\n        }\n      }\n    }); // The different types of TT2 strings \"replace\" the C-like standard string\n\n    delete Prism.languages.tt2.string;\n    Prism.hooks.add('before-tokenize', function (env) {\n      var tt2Pattern = /\\[%[\\s\\S]+?%\\]/g;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'tt2', tt2Pattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'tt2');\n    });\n  })(Prism);\n}"],"sourceRoot":""}