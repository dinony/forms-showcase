(window.webpackJsonp=window.webpackJsonp||[]).push([[156,158],{399:function(e,n,t){"use strict";t.r(n);var a=t(2),o=t.n(a),r=t(387),l=function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement("h1",null,"404 - Not Found"),o.a.createElement("p",null,"The page you've requested could not be found."),o.a.createElement(r.a,{to:"/"},"Go to homepage"))},m=l;t.d(n,"NotFound",function(){return l}),t.d(n,"AsyncPage",function(){return m})},400:function(e,n,t){"use strict";t.d(n,"a",function(){return c});var a=t(2),o=t(742),r=t(412),l=t.n(r),m=t(411),u=t.n(m),i=t(413),s=t.n(i);o.a.registerLanguage("jsx",u.a),o.a.registerLanguage("bash",l.a);var c=function(e){var n=e.code,t=e.language,r=void 0===t?"jsx":t;return a.createElement(o.a,{language:r,style:s.a},n)}},492:function(e,n){e.exports="import React from 'react';\nimport { Form } from 'react-ocean-forms';\nimport { Check } from 'react-ocean-forms-bootstrap';\n\nfunction Example({ logMessage }) {\n  // onChange callback\n  const handleChange = (value) => {\n    logMessage('onChange, value: ' + JSON.stringify(value));\n  };\n\n  // onBlur callback\n  const handleBlur = () => {\n    logMessage('onBlur');\n  };\n\n  return (\n    <Form className=\"demo\">\n      <Check\n        name=\"check\"\n        label=\"Sample checkbox\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        />\n    </Form>\n  );\n}\n\nexport default Example;\n"},493:function(e,n){e.exports='import React from \'react\';\nimport { Form } from \'react-ocean-forms\';\nimport { DatePicker } from \'react-ocean-forms-bootstrap\';\n\nfunction Example({ logMessage }) {\n  // onChange callback\n  const handleChange = (value) => {\n    logMessage(\'onChange, value: \' + JSON.stringify(value));\n  };\n\n  // onBlur callback\n  const handleBlur = () => {\n    logMessage(\'onBlur\');\n  };\n\n  return (\n    <Form className="demo">\n      <DatePicker\n        name="datePicker"\n        label="Sample date picker"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        dateFormat="DD.MM.YYYY"\n      />\n\n      <DatePicker\n        name="timePicker"\n        label="Sample time picker"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        dateFormat={false}\n        timeFormat="HH:mm"\n      />\n    </Form>\n  );\n}\n\nexport default Example;\n'},494:function(e,n){e.exports='import React from \'react\';\nimport { Form } from \'react-ocean-forms\';\nimport { DatePicker } from \'react-ocean-forms-bootstrap\';\n\nfunction Example({ logMessage }) {\n  // onChange callback\n  const handleChange = (value) => {\n    logMessage(\'onChange, value: \' + JSON.stringify(value));\n  };\n\n  // onBlur callback\n  const handleBlur = () => {\n    logMessage(\'onBlur\');\n  };\n\n  return (\n    <Form className="demo" plaintext>\n      <DatePicker\n        name="datePicker"\n        label="Date picker"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        dateFormat="DD.MM.YYYY"\n        defaultValue="2019-01-17T00:00:00+01:00"\n      />\n\n      <DatePicker\n        name="timePicker"\n        label="Time picker"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        dateFormat={false}\n        timeFormat="HH:mm"\n        defaultValue="2019-01-01T05:06:00+01:00"\n      />\n    </Form>\n  );\n}\n\nexport default Example;\n'},495:function(e,n){e.exports='import React from \'react\';\nimport { Form } from \'react-ocean-forms\';\nimport { Input, FormButton } from \'react-ocean-forms-bootstrap\';\n\nfunction Example() {\n  return (\n    <Form className="demo" disabled>\n      <Input\n        name="input"\n        label="Sample input"\n        />\n\n      <FormButton type="submit" color="primary">Submit</FormButton>\n      <FormButton type="reset">Reset</FormButton>\n    </Form>\n  );\n}\n\nexport default Example;\n'},496:function(e,n){e.exports='import React from \'react\';\nimport { Form } from \'react-ocean-forms\';\nimport { Input, FormButton } from \'react-ocean-forms-bootstrap\';\n\nfunction asyncValidator(value) {\n  return new Promise(function(resolve) {\n    setTimeout(() => {\n      if (value === \'\') {\n        resolve(\'Invalid input\');\n      } else {\n        resolve();\n      }\n    }, 1000);\n  });\n}\n\nfunction Example({ logMessage }) {\n  return (\n    <Form className="demo">\n      <Input\n        name="input"\n        label="Sample input"\n        asyncValidators={[asyncValidator]}\n      />\n\n      <FormButton type="submit" color="primary">Submit</FormButton>\n      <FormButton type="reset">Reset</FormButton>\n    </Form>\n  );\n}\n\nexport default Example;\n'},497:function(e,n){e.exports='import React from \'react\';\nimport { Form } from \'react-ocean-forms\';\nimport { Input } from \'react-ocean-forms-bootstrap\';\nimport { Button } from \'reactstrap\';\n\nfunction Example() {\n  return (\n    <Form className="demo">\n      <Input\n        name="prefixInput"\n        label="With Prefix"\n        prefix="Prefix text"\n      />\n\n      <Input\n        name="customPrefixInput"\n        label="Custom prefix"\n        prefix={<Button>Prefix</Button>}\n      />\n\n      <Input\n        name="suffixInput"\n        label="With Suffix"\n        suffix="Suffix text"\n      />\n\n      <Input\n        name="customSuffixInput"\n        label="Custom Suffix"\n        suffix={<Button>Suffix</Button>}\n      />\n    </Form>\n  );\n}\n\nexport default Example;\n'},498:function(e,n){e.exports='import React from \'react\';\nimport { Form, validators } from \'react-ocean-forms\';\nimport { Input } from \'react-ocean-forms-bootstrap\';\n\nfunction Example({ logMessage }) {\n  // onChange callback\n  const handleChange = (value) => {\n    logMessage(\'onChange, value: \' + JSON.stringify(value));\n  };\n\n  // onBlur callback\n  const handleBlur = () => {\n    logMessage(\'onBlur\');\n  };\n\n  return (\n    <Form className="demo">\n      <Input\n        name="myInput"\n        label="Normal input"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        />\n\n      <Input\n        name="requiredInput"\n        label="Required input"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        validators={[validators.required]}\n      />\n\n      <Input\n        name="infoInput"\n        label="Info input"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        info="Custom info text!"\n      />\n    </Form>\n  );\n}\n\nexport default Example;\n'},499:function(e,n){e.exports='import React from \'react\';\nimport { Form, validators } from \'react-ocean-forms\';\nimport { Input } from \'react-ocean-forms-bootstrap\';\n\nfunction Example() {\n  return (\n    <Form className="demo" plaintext>\n      <Input\n        name="myInput"\n        label="Normal input"\n        defaultValue="Example text"\n        />\n\n      <Input\n        name="requiredInput"\n        label="Required input"\n        validators={[validators.required]}\n      />\n\n      <Input\n        name="infoInput"\n        label="Info input"\n        info="Custom info text!"\n        defaultValue="Lorem ipsum ..."\n      />\n    </Form>\n  );\n}\n\nexport default Example;\n'},500:function(e,n){e.exports="import React from 'react';\nimport { Form } from 'react-ocean-forms';\nimport { OnOffToggleButton } from 'react-ocean-forms-bootstrap';\n\nfunction Example({ logMessage }) {\n  // onChange callback\n  const handleChange = (value) => {\n    logMessage('onChange, value: ' + JSON.stringify(value));\n  };\n\n  // onBlur callback\n  const handleBlur = () => {\n    logMessage('onBlur');\n  };\n\n  return (\n    <Form className=\"demo\">\n      <OnOffToggleButton\n        name=\"check\"\n        label=\"Sample toggle\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        />\n    </Form>\n  );\n}\n\nexport default Example;\n"},501:function(e,n){e.exports='import React from \'react\';\nimport { Form, validators } from \'react-ocean-forms\';\nimport { Select } from \'react-ocean-forms-bootstrap\';\n\nfunction Example({ logMessage }) {\n  // onChange callback\n  const handleChange = (value) => {\n    logMessage(\'onChange, value: \' + JSON.stringify(value));\n  };\n\n  // onBlur callback\n  const handleBlur = () => {\n    logMessage(\'onBlur\');\n  };\n\n  const options = [\n    { label: \'Option 1\', value: "1" },\n    { label: \'Option 2\', value: "2" },\n  ];\n\n  return (\n    <Form className="demo">\n      <Select\n        name="myInput"\n        label="Normal input"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        options={options}\n      />\n\n      <Select\n        name="multiInput"\n        label="Multi input"\n        multi\n        onChange={handleChange}\n        onBlur={handleBlur}\n        options={options}\n      />\n\n      <Select\n        name="searchableInput"\n        label="Searchable input"\n        searchable\n        onChange={handleChange}\n        onBlur={handleBlur}\n        options={options}\n      />\n\n      <Select\n        name="clearableInput"\n        label="Clearable input"\n        clearable\n        onChange={handleChange}\n        onBlur={handleBlur}\n        options={options}\n      />\n\n      <Select\n        name="requiredInput"\n        label="Required input"\n        clearable\n        onChange={handleChange}\n        onBlur={handleBlur}\n        validators={[validators.required]}\n        options={options}\n      />\n    </Form>\n  );\n}\n\nexport default Example;\n'},502:function(e,n){e.exports="import React from 'react';\nimport { Form } from 'react-ocean-forms';\nimport { Select } from 'react-ocean-forms-bootstrap';\n\nfunction Example({ logMessage }) {\n  // onChange callback\n  const handleChange = (value) => {\n    logMessage('onChange, value: ' + JSON.stringify(value));\n  };\n\n  // onBlur callback\n  const handleBlur = () => {\n    logMessage('onBlur');\n  };\n\n  const options = [\n    { label: 'Option 1', value: \"1\" },\n    { label: 'Option 2', value: \"2\" },\n  ];\n\n  return (\n    <Form className=\"demo\" plaintext>\n      <Select\n        name=\"myInput\"\n        label=\"Normal input\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        options={options}\n        defaultValue={options[0]}\n      />\n\n      <Select\n        name=\"multiInput\"\n        label=\"Multi input\"\n        multi\n        onChange={handleChange}\n        onBlur={handleBlur}\n        options={options}\n        defaultValue={options}\n      />\n    </Form>\n  );\n}\n\nexport default Example;\n"},503:function(e,n){e.exports='import React from \'react\';\nimport { Form, validators } from \'react-ocean-forms\';\nimport { Input, ValidationSummary } from \'react-ocean-forms-bootstrap\';\n\nfunction Example() {\n  return (\n    <Form className="demo">\n      <ValidationSummary id="demoSummary" />\n\n      <Input\n        name="requiredInput"\n        label="Required input"\n        validators={[validators.required]}\n      />\n\n      <button type="submit">Submit</button>\n      <button type="reset">Reset</button>\n    </Form>\n  );\n}\n\nexport default Example;\n'},504:function(e,n){e.exports='import React from \'react\';\nimport { Form, FieldGroup, Input } from \'react-ocean-forms\';\n\n/** Reusable contact person fields */\nfunction ContactFields() {\n  return (\n    <React.Fragment>\n      <Input name="first" label="First name" />\n      <Input name="last" label="Last name" />\n    </React.Fragment>\n  );\n}\n\nfunction Example({ logMessage }) {\n  const handleSubmit = (values) => {\n    logMessage(\'onSubmit, values: \' + JSON.stringify(values));\n  };\n\n  return (\n    <Form className="demo" onSubmit={handleSubmit}>\n      <FieldGroup\n        name="mainContact"\n        label="Main contact"\n        render={() => {\n          return (\n            <React.Fragment>\n              <strong>Main contact</strong>\n              <ContactFields />\n            </React.Fragment>\n          );\n        }}\n      />\n\n      <FieldGroup\n        name="technicalContact"\n        label="Technical contact"\n        render={() => {\n          return (\n            <div className="mt-4">\n              <strong>Technical contact</strong>\n              <ContactFields />\n            </div>\n          );\n        }}\n      />\n\n      <FieldGroup\n        name="disabledContact"\n        label="Disabled contact"\n        disabled\n        render={() => {\n          return (\n            <div className="mt-4">\n              <strong>Disabled contact</strong>\n              <ContactFields />\n            </div>\n          );\n        }}\n      />\n\n      <FieldGroup\n        name="plaintextContact"\n        label="Plaintext contact"\n        plaintext\n        values={{\n          first: \'Foo\',\n          last: \'Bar\',\n        }}\n        render={() => {\n          return (\n            <div className="mt-4">\n              <strong>Plaintext contact</strong>\n              <ContactFields />\n            </div>\n          );\n        }}\n      />\n      <button type="submit">Submit</button>\n    </Form>\n  );\n}\n\nexport default Example;\n'},505:function(e,n){e.exports='import React from \'react\';\nimport { Form, FieldGroup, Input } from \'react-ocean-forms\';\n\nfunction Example({ logMessage }) {\n  // Submit callback, here you\'d make your api calls\n  const handleSubmit = (values) => {\n    logMessage(\'onSubmit, values: \' + JSON.stringify(values));\n  };\n\n  // Notice how a field group creates a sub object\n  const defaultValues = {\n    myGroup: {\n      myInput1: \'input 1\',\n      myInput2: \'input 2\',\n    }\n  };\n\n  return (\n    <Form\n      className="demo"\n      onSubmit={handleSubmit}\n      defaultValues={defaultValues}\n    >\n      <FieldGroup\n        name="myGroup"\n        label="Example group"\n        render={() => {\n          return (\n            <React.Fragment>\n              <Input name="myInput1" label="Example input" />\n              <Input name="myInput2" label="Example input 2" />\n            </React.Fragment>\n          );\n        }}\n      />\n      <button type="submit">Submit</button>\n    </Form>\n  );\n}\n\nexport default Example;\n'},506:function(e,n){e.exports="import React from 'react';\nimport { Form, Input } from 'react-ocean-forms';\n\nfunction Example({ logMessage }) {\n  // onChange callback\n  const handleChange = (value) => {\n    logMessage('onChange, value: ' + JSON.stringify(value));\n  };\n\n  // onBlur callback\n  const handleBlur = () => {\n    logMessage('onBlur');\n  };\n\n  return (\n    <Form className=\"demo\">\n      <Input\n        name=\"myInput\"\n        label=\"Example input\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        />\n    </Form>\n  );\n}\n\nexport default Example;\n"},507:function(e,n){e.exports="import React from 'react';\nimport { Form, Input } from 'react-ocean-forms';\n\nfunction Example({ logMessage }) {\n  const getDisplayValue = (value, meta) => {\n    logMessage(\n      'getDisplayValue, value: ' + JSON.stringify(value) +\n      ', meta: ' + JSON.stringify(meta)\n    );\n\n    // This value will be used by the input when the field\n    // loads its value from the form defaults.\n    return 'display value: ' + value;\n  };\n\n  const getSubmitValue = (value, meta) => {\n    logMessage(\n      'getSubmitValue, value: ' + JSON.stringify(value) +\n      ', meta: ' + JSON.stringify(meta)\n    );\n\n    // This value will be used by the validators and by the\n    // form as the submitted value of the field.\n    return value.replace('display value:', 'submit value: ');\n  };\n\n  const handleSubmit = (values) => {\n    logMessage('onSubmit, values: ' + JSON.stringify(values));\n  };\n\n  return (\n    <Form className=\"demo\" onSubmit={handleSubmit}>\n      <Input\n        name=\"myInput\"\n        label=\"Example input\"\n        getDisplayValue={getDisplayValue}\n        getSubmitValue={getSubmitValue}\n        />\n\n      <button type=\"submit\">Submit</button>\n      <button type=\"reset\">Reset</button>\n    </Form>\n  );\n}\n\nexport default Example;\n"},508:function(e,n){e.exports='import React from \'react\';\nimport { Form, Input, FormButton } from \'react-ocean-forms\';\n\nfunction Example() {\n  return (\n    <Form className="demo" disabled>\n      <Input\n        name="input"\n        label="Sample input"\n        />\n\n      <FormButton type="submit">Submit</FormButton>\n      <FormButton type="reset">Reset</FormButton>\n    </Form>\n  );\n}\n\nexport default Example;\n'},509:function(e,n){e.exports="import React from 'react';\nimport { Form, Input, FormButton } from 'react-ocean-forms';\n\nfunction Example({ logMessage }) {\n  const handleSubmit = (values, submitArgs) => {\n    logMessage(\n      'onSubmit, values: ' + JSON.stringify(values) +\n      ', submitArgs: ' + JSON.stringify(submitArgs)\n    );\n  };\n\n  return (\n    <Form className=\"demo\" onSubmit={handleSubmit}>\n      <Input\n        name=\"input\"\n        label=\"Sample input\"\n        />\n\n      <FormButton type=\"submit\" submitArgs={{ foo: 'bar' }}>Submit</FormButton>\n      <FormButton type=\"reset\">Reset</FormButton>\n    </Form>\n  );\n}\n\nexport default Example;\n"},510:function(e,n){e.exports='import React from \'react\';\nimport { Form, Input, FormButton } from \'react-ocean-forms\';\n\nfunction asyncValidator(value) {\n  return new Promise(function(resolve) {\n    setTimeout(() => {\n      if (value === \'\') {\n        resolve(\'Invalid input\');\n      } else {\n        resolve();\n      }\n    }, 1000);\n  });\n}\n\nfunction Example({ logMessage }) {\n  return (\n    <Form className="demo">\n      <Input\n        name="input"\n        label="Sample input"\n        asyncValidators={[asyncValidator]}\n      />\n\n      <FormButton type="submit">Submit</FormButton>\n      <FormButton type="reset">Reset</FormButton>\n    </Form>\n  );\n}\n\nexport default Example;\n'},511:function(e,n){e.exports='import React from \'react\';\nimport { Form, Input } from \'react-ocean-forms\';\n\nclass Example extends React.Component {\n  state = {\n    defaultValues: {\n      myInput: \'default value\',\n    },\n  };\n\n  // Submit callback, here you\'d make your api calls\n  handleSubmit = (values) => {\n    const { logMessage } = this.props;\n    logMessage(\'onSubmit, values: \' + JSON.stringify(values));\n  };\n\n  randomizeDefaultValues = () => {\n    this.setState({\n      defaultValues: {\n        myInput: `default ${(Math.floor(Math.random() * 100))}`,\n      },\n    });\n  }\n\n  render() {\n    const { defaultValues } = this.state;\n\n    return (\n      <Form\n        className="demo"\n        onSubmit={this.handleSubmit}\n        defaultValues={defaultValues}\n      >\n        <Input name="myInput" label="Example input" />\n\n        <p className="mt-4">\n          Current default value: {defaultValues.myInput}\n        </p>\n\n        <button type="submit">Submit</button>\n        <button type="reset">Reset</button>\n        <button\n          type="button"\n          onClick={this.randomizeDefaultValues}\n          className="ml-1"\n        >\n          Update default values\n        </button>\n      </Form>\n    );\n  }\n}\n\nexport default Example;\n'},512:function(e,n){e.exports='import React from \'react\';\nimport { Form, Input } from \'react-ocean-forms\';\n\nfunction Example({ logMessage }) {\n  // Submit callback, here you\'d make your api calls\n  const handleSubmit = (values) => {\n    logMessage(\'onSubmit, values: \' + JSON.stringify(values));\n  };\n\n  return (\n    <Form\n      className="demo"\n      onSubmit={handleSubmit}\n      disabled\n    >\n      <Input name="myInput" label="Example input 1" />\n      <Input name="myInput2" label="Example input 2" />\n      <button type="submit">Submit</button>\n    </Form>\n  );\n}\n\nexport default Example;\n'},513:function(e,n){e.exports="import React from 'react';\nimport { Form, Input, ValidationSummary } from 'react-ocean-forms';\n\nfunction Example({ logMessage }) {\n  // Submit callback, here you'd make your api calls\n  const handleSubmit = (values) => {\n    logMessage('onSubmit, values: ' + JSON.stringify(values));\n  };\n\n  // Reset callback, can be useful in some cases for cleanup\n  const handleReset = () => {\n    logMessage('onReset');\n  };\n\n  // Form wide validation function\n  const handleValidate = (values) => {\n    if (values.demoInput === 'bad') {\n      return {\n        demoInput: 'Invalid input!',\n      };\n    }\n\n    return null;\n  };\n\n  return (\n    <Form\n      className=\"demo\"\n      onSubmit={handleSubmit}\n      onReset={handleReset}\n      onValidate={handleValidate}\n    >\n      <ValidationSummary id=\"summary\" />\n\n      <Input name=\"demoInput\" label=\"Example input\" />\n\n      <button type=\"submit\">Submit</button>\n      <button type=\"reset\">Reset</button>\n    </Form>\n  );\n}\n\nexport default Example;\n"},514:function(e,n){e.exports='import React from \'react\';\nimport { Form, Input } from \'react-ocean-forms\';\n\nclass Example extends React.Component {\n  state = {\n    // Typically you\'d load the values from your backend\n    values: {\n      myInput: \'demo value\',\n    },\n  };\n\n  // Submit callback, here you\'d make your api calls\n  handleSubmit = (values) => {\n    const { logMessage } = this.props;\n    logMessage(\'onSubmit, values: \' + JSON.stringify(values));\n  };\n\n  randomizeValues = () => {\n    this.setState({\n      values: {\n        myInput: `demo ${(Math.floor(Math.random() * 100))}`,\n      },\n    });\n  }\n\n  render() {\n    const { values } = this.state;\n\n    return (\n      <Form\n        className="demo"\n        onSubmit={this.handleSubmit}\n        values={values}\n      >\n        <Input name="myInput" label="Example input" />\n\n        <button type="submit">Submit</button>\n        <button type="reset">Reset</button>\n        <button\n          type="button"\n          onClick={this.randomizeValues}\n          className="ml-1"\n        >\n          Update values\n        </button>\n      </Form>\n    );\n  }\n}\n\nexport default Example;\n'},515:function(e,n){e.exports='import React from \'react\';\nimport { Form, Input } from \'react-ocean-forms\';\n\nfunction Example({ logMessage }) {\n  const defaultValues = {\n    myInput: \'default value 1\',\n    myInput2: \'default value 2\',\n  };\n\n  return (\n    <Form\n      className="demo"\n      defaultValues={defaultValues}\n      plaintext\n    >\n      <Input name="myInput" label="Example input 1" />\n      <Input name="myInput2" label="Example input 2" />\n    </Form>\n  );\n}\n\nexport default Example;\n'},516:function(e,n){e.exports='import React from \'react\';\nimport { Form, Input } from \'react-ocean-forms\';\n\nfunction Example({ logMessage }) {\n  // Submit callback, here you\'d make your api calls\n  const handleSubmit = (values) => {\n    logMessage(\'onSubmit, values: \' + JSON.stringify(values));\n  };\n\n  // Reset callback, can be useful in some cases for cleanup\n  const handleReset = () => {\n    logMessage(\'onReset\');\n  };\n\n  return (\n    <Form\n      className="demo"\n      onSubmit={handleSubmit}\n      onReset={handleReset}\n    >\n      <Input name="myInput" label="Example input" />\n      <button type="submit">Submit</button>\n      <button type="reset">Reset</button>\n    </Form>\n  );\n}\n\nexport default Example;\n'},517:function(e,n){e.exports="import React from 'react';\nimport { Form, FormText } from 'react-ocean-forms';\n\nfunction Example() {\n  return (\n    <Form>\n      <p>\n        <FormText\n          text=\"Demo output\"\n        />\n      </p>\n\n      <p>\n        <FormText\n          text=\"Output with parameters: {param}\"\n          values={{ param: 'Demo value' }}\n        />\n      </p>\n    </Form>\n  );\n}\n\nexport default Example;\n"},518:function(e,n){e.exports='import React from \'react\';\nimport { Form, withField } from \'react-ocean-forms\';\n\n/**\n * Simple implementation of a custom input\n */\nfunction BaseCustomInput(props) {\n  const {\n    field,\n    label,\n    type,\n    meta,\n    customProp,\n  } = props;\n\n\n  return (\n    <div>\n      <div>\n        <label htmlFor={field.id}>\n          <strong>{meta.stringFormatter(label)}</strong>\n        </label>\n      </div>\n      <input type={type} {...field} />\n      {customProp}\n    </div>\n  );\n}\nconst CustomInput = withField(BaseCustomInput);\n\nfunction Example({ logMessage }) {\n  // Submit callback, here you\'d make your api calls\n  const handleSubmit = (values) => {\n    logMessage(\'onSubmit, values: \' + JSON.stringify(values));\n  };\n\n  // onChange callback\n  const handleChange = (value) => {\n    logMessage(\'onChange, value: \' + JSON.stringify(value));\n  };\n\n  // onBlur callback\n  const handleBlur = () => {\n    logMessage(\'onBlur\');\n  };\n\n  return (\n    <Form className="demo" onSubmit={handleSubmit}>\n      <CustomInput\n        name="myCustomInput"\n        label="Input with info text"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        customProp="custom text"\n      />\n\n      <button type="submit">Submit</button>\n      <button type="reset">Reset</button>\n    </Form>\n  );\n}\n\nexport default Example;\n'},519:function(e,n){e.exports='import React from \'react\';\nimport { Form, Input } from \'react-ocean-forms\';\n\nfunction Example({ logMessage }) {\n  // onChange callback\n  const handleChange = (value) => {\n    logMessage(\'onChange, value: \' + JSON.stringify(value));\n  };\n\n  // onBlur callback\n  const handleBlur = () => {\n    logMessage(\'onBlur\');\n  };\n\n  return (\n    <Form className="demo">\n      <Input\n        name="myInput"\n        label="Number input"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        type="number"\n      />\n\n      <Input\n        name="myInput2"\n        label="Date input"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        type="date"\n      />\n    </Form>\n  );\n}\n\nexport default Example;\n'},520:function(e,n){e.exports='import React from \'react\';\nimport { Form, Input, ValidationSummary, validators } from \'react-ocean-forms\';\n\nfunction Example({ logMessage }) {\n  return (\n    <Form className="demo">\n      <ValidationSummary id="summary" />\n\n      <Input\n        name="input1"\n        label="Example input 1"\n        validators={[validators.required]}\n      />\n\n      <Input\n        name="input2"\n        label="Example input 2"\n        validators={[validators.required]}\n      />\n\n      <button type="submit">Submit</button>\n      <button type="reset">Reset</button>\n    </Form>\n  );\n}\n\nexport default Example;\n'},521:function(e,n){},529:function(e,n){},536:function(e,n){},546:function(e,n){e.exports="import React from 'react';\nimport { IntlProvider, FormattedMessage, addLocaleData } from 'react-intl';\nimport deLocaleData from 'react-intl/locale-data/de';\nimport { IntlForm } from 'react-ocean-forms-react-intl';\nimport { Button } from 'reactstrap';\nimport { validators, FormText } from 'react-ocean-forms';\nimport { Input, FormButton } from 'react-ocean-forms-bootstrap';\n\nclass Example extends React.Component {\n  state = { locale: 'en' };\n  messages = {\n    en: {\n      lblName: 'First name',\n      lblMail: 'E-Mail',\n      submit: 'Submit',\n      reset: 'Reset',\n      customText: 'My example text',\n      ojs_field_required: 'This field is required!',\n      ojs_error_required: 'This field is required!',\n    },\n    de: {\n      lblName: 'Vorname',\n      lblMail: 'E-Mail',\n      submit: 'Senden',\n      reset: 'Zur\xfccksetzen',\n      customText: 'Mein Beispieltext',\n      ojs_field_required: 'Pflichtfeld!',\n      ojs_error_required: 'Dieses Feld muss ausgef\xfcllt werden!',\n    },\n  };\n\n  render() {\n    const { locale } = this.state;\n\n    addLocaleData(deLocaleData);\n\n    return (\n      <IntlProvider locale={locale} messages={this.messages[locale]}>\n        <IntlForm className=\"demo\">\n          <p>\n            <Button\n              className=\"mr-2\"\n              onClick={() => this.setState({ locale: 'en' })}\n            >\n              English\n            </Button>\n            <Button\n              className=\"mr-2\"\n              onClick={() => this.setState({ locale: 'de' })}\n            >\n              German\n            </Button>\n          </p>\n\n          <Input\n            name=\"name\"\n            label=\"lblName\"\n            validators={[validators.required]}\n          />\n          <Input\n            name=\"mail\"\n            label=\"lblMail\"\n            />\n\n          <p>\n            <FormText text=\"customText\" />\n          </p>\n\n          <FormButton color=\"primary\">\n            <FormattedMessage id=\"submit\" />\n          </FormButton>\n          <FormButton type=\"reset\">\n            <FormattedMessage id=\"reset\" />\n          </FormButton>\n        </IntlForm>\n      </IntlProvider>\n    );\n  }\n}\n\nexport default Example;\n"},740:function(e,n,t){"use strict";t.r(n);var a=t(2),o=t.n(a),r=t(394),l=t(395),m=t(600),u=t(387),i=t(547),s=t(480),c=t(390),p=t(392),d=t(391),f=t(399),b=(t(456),t(417)),h=t(401),g=t(402),E=t(404),v=t(403),y=t(405),x=t(457),S=t(458),F=function(e){function n(){return Object(h.a)(this,n),Object(E.a)(this,Object(v.a)(n).apply(this,arguments))}return Object(y.a)(n,e),Object(g.a)(n,[{key:"render",value:function(){var e=this.props,n=e.title,t=e.description,a=e.children,r=e.parent,l=Object(b.a)(e,["title","description","children","parent"]),m=null;switch(r){case"core":m="react-ocean-forms";break;case"bootstrap":m="react-ocean-forms-bootstrap";break;case"intl":m="react-ocean-forms-react-intl";break;default:throw new Error("Unsupported parent type")}var i=n.replace(/(?!^)[A-Z]/g,function(e){return"-".concat(e)}).toLowerCase();return o.a.createElement("div",Object.assign({className:"component-page"},l),o.a.createElement(x.a,null,o.a.createElement(S.a,null,"Components"),o.a.createElement(S.a,null,m),o.a.createElement(S.a,{tag:"strong"},n)),o.a.createElement("h1",null,n," ",o.a.createElement(u.a,{to:"/api/".concat(r,"/").concat(i)},"(go to API documentation)")),o.a.createElement("p",null,t),a)}}]),n}(o.a.Component),I=t(599),C=t(601),B=t(400),N=function(e){function n(){var e,t;Object(h.a)(this,n);for(var a=arguments.length,o=new Array(a),r=0;r<a;r++)o[r]=arguments[r];return(t=Object(E.a)(this,(e=Object(v.a)(n)).call.apply(e,[this].concat(o)))).state={messageLog:[],showCode:!1},t.logMessage=function(e){t.setState(function(n){var t=n.messageLog;return t.length>9&&t.splice(9,1),{messageLog:[e].concat(Object(I.a)(t))}})},t.hideCode=function(){t.setState({showCode:!1})},t.showCode=function(){t.setState({showCode:!0})},t}return Object(y.a)(n,e),Object(g.a)(n,[{key:"render",value:function(){var e=this.props,n=e.title,t=e.description,a=e.component,r=e.code,l=this.state,m=l.messageLog,u=l.showCode;return o.a.createElement("div",{className:"showcase"},o.a.createElement("h5",{id:n},n),o.a.createElement("p",{className:"description"},t),o.a.createElement("div",{className:"display"},o.a.createElement(a,{logMessage:this.logMessage})),m.length>0&&o.a.createElement("div",{className:"message-log"},o.a.createElement("h6",null,"Message log"),o.a.createElement("pre",null,m.join("\n"))),o.a.createElement("div",{className:"source"},u?o.a.createElement(o.a.Fragment,null,o.a.createElement("h6",null,o.a.createElement(C.a,{color:"link",onClick:this.hideCode},"Hide sourcecode")),o.a.createElement(B.a,{code:r})):o.a.createElement("h6",{className:"mb-0"},o.a.createElement(C.a,{color:"link",onClick:this.showCode},"Show sourcecode"))))}}]),n}(o.a.Component),M=t(396),k=t(398);var w=function(e){var n=e.logMessage;return o.a.createElement(M.b,{className:"demo"},o.a.createElement(k.a,{name:"check",label:"Sample checkbox",onChange:function(e){n("onChange, value: "+JSON.stringify(e))},onBlur:function(){n("onBlur")}}))},O=t(492),R=t.n(O),V=function(){return o.a.createElement(F,{title:"Select",description:"Defines a bootstrap form line containing a checkbox with the label as the checkbox text. Additionally it can render an info button and info alert as well as validation messages. If the user adds the required validator then it will mark the field as required as well.",parent:"bootstrap"},o.a.createElement(N,{title:"Check",description:"Showcase of a simple checkbox",component:w,code:R.a}))};var D=function(e){var n=e.logMessage,t=function(e){n("onChange, value: "+JSON.stringify(e))},a=function(){n("onBlur")};return o.a.createElement(M.b,{className:"demo"},o.a.createElement(k.b,{name:"datePicker",label:"Sample date picker",onChange:t,onBlur:a,dateFormat:"DD.MM.YYYY"}),o.a.createElement(k.b,{name:"timePicker",label:"Sample time picker",onChange:t,onBlur:a,dateFormat:!1,timeFormat:"HH:mm"}))};var q=function(e){var n=e.logMessage,t=function(e){n("onChange, value: "+JSON.stringify(e))},a=function(){n("onBlur")};return o.a.createElement(M.b,{className:"demo",plaintext:!0},o.a.createElement(k.b,{name:"datePicker",label:"Date picker",onChange:t,onBlur:a,dateFormat:"DD.MM.YYYY",defaultValue:"2019-01-17T00:00:00+01:00"}),o.a.createElement(k.b,{name:"timePicker",label:"Time picker",onChange:t,onBlur:a,dateFormat:!1,timeFormat:"HH:mm",defaultValue:"2019-01-01T05:06:00+01:00"}))},P=t(493),J=t.n(P),T=t(494),j=t.n(T),A=function(){return o.a.createElement(F,{title:"DatePicker",description:"Defines a bootstrap form line containing a label and a react-datetime input. Additionally it can render an info button and info alert as well as validation messages. If the user adds the required validator then it will mark the field as required as well.",parent:"bootstrap"},o.a.createElement(N,{title:"react-datetime",description:"Showcase of a simple datepicker using react-datetime in the background",component:D,code:J.a}),o.a.createElement(N,{title:"Plaintext support",description:"Support for plaintext mode is provided out of the box.",component:q,code:j.a}))};var Y=function(){return o.a.createElement(M.b,{className:"demo",disabled:!0},o.a.createElement(k.d,{name:"input",label:"Sample input"}),o.a.createElement(k.c,{type:"submit",color:"primary"},"Submit"),o.a.createElement(k.c,{type:"reset"},"Reset"))};function G(e){return new Promise(function(n){setTimeout(function(){""===e?n("Invalid input"):n()},1e3)})}var L=function(e){return e.logMessage,o.a.createElement(M.b,{className:"demo"},o.a.createElement(k.d,{name:"input",label:"Sample input",asyncValidators:[G]}),o.a.createElement(k.c,{type:"submit",color:"primary"},"Submit"),o.a.createElement(k.c,{type:"reset"},"Reset"))},_=t(495),z=t.n(_),H=t(496),U=t.n(H),W=function(){return o.a.createElement(F,{title:"FormButton",description:"Defines a bootstrap button that integrates into the Form context. It will be disabled when the form is busy or disabled.",parent:"bootstrap"},o.a.createElement(N,{title:"FormButton",description:"Showcase of the form button",component:L,code:U.a}),o.a.createElement(N,{title:"Disabled form",description:"FormButtons are disabled if the form is disabled too",component:Y,code:z.a}))};var Z=function(){return o.a.createElement(M.b,{className:"demo"},o.a.createElement(k.d,{name:"prefixInput",label:"With Prefix",prefix:"Prefix text"}),o.a.createElement(k.d,{name:"customPrefixInput",label:"Custom prefix",prefix:o.a.createElement(C.a,null,"Prefix")}),o.a.createElement(k.d,{name:"suffixInput",label:"With Suffix",suffix:"Suffix text"}),o.a.createElement(k.d,{name:"customSuffixInput",label:"Custom Suffix",suffix:o.a.createElement(C.a,null,"Suffix")}))};var $=function(e){var n=e.logMessage,t=function(e){n("onChange, value: "+JSON.stringify(e))},a=function(){n("onBlur")};return o.a.createElement(M.b,{className:"demo"},o.a.createElement(k.d,{name:"myInput",label:"Normal input",onChange:t,onBlur:a}),o.a.createElement(k.d,{name:"requiredInput",label:"Required input",onChange:t,onBlur:a,validators:[M.h.required]}),o.a.createElement(k.d,{name:"infoInput",label:"Info input",onChange:t,onBlur:a,info:"Custom info text!"}))};var K=function(){return o.a.createElement(M.b,{className:"demo",plaintext:!0},o.a.createElement(k.d,{name:"myInput",label:"Normal input",defaultValue:"Example text"}),o.a.createElement(k.d,{name:"requiredInput",label:"Required input",validators:[M.h.required]}),o.a.createElement(k.d,{name:"infoInput",label:"Info input",info:"Custom info text!",defaultValue:"Lorem ipsum ..."}))},Q=t(497),X=t.n(Q),ee=t(498),ne=t.n(ee),te=t(499),ae=t.n(te),oe=function(){return o.a.createElement(F,{title:"Input",description:"Defines a bootstrap form line containing a label and an input. Additionally it can render an info button and info alert as well as validation messages. If the user adds the required validator then it will mark the field as required as well.",parent:"bootstrap"},o.a.createElement(N,{title:"Bootstrap input",description:"Showcase of the bootstrap input",component:$,code:ne.a}),o.a.createElement(N,{title:"Prefix and suffix",description:"Bootstraps prefix and suffix are also supported.",component:Z,code:X.a}),o.a.createElement(N,{title:"Plaintext mode",description:"All inputs from this package support the plaintext mode as well.",component:K,code:ae.a}))};var re=function(e){var n=e.logMessage;return o.a.createElement(M.b,{className:"demo"},o.a.createElement(k.e,{name:"check",label:"Sample toggle",onChange:function(e){n("onChange, value: "+JSON.stringify(e))},onBlur:function(){n("onBlur")}}))},le=t(500),me=t.n(le),ue=function(){return o.a.createElement(F,{title:"OnOffToggleButton",description:"Defines a bootstrap button group that can be toggled between true and false.",parent:"bootstrap"},o.a.createElement(N,{title:"Toggle button",description:"Showcase of the toggle button",component:re,code:me.a}))};var ie=function(e){var n=e.logMessage,t=function(e){n("onChange, value: "+JSON.stringify(e))},a=function(){n("onBlur")},r=[{label:"Option 1",value:"1"},{label:"Option 2",value:"2"}];return o.a.createElement(M.b,{className:"demo"},o.a.createElement(k.f,{name:"myInput",label:"Normal input",onChange:t,onBlur:a,options:r}),o.a.createElement(k.f,{name:"multiInput",label:"Multi input",multi:!0,onChange:t,onBlur:a,options:r}),o.a.createElement(k.f,{name:"searchableInput",label:"Searchable input",searchable:!0,onChange:t,onBlur:a,options:r}),o.a.createElement(k.f,{name:"clearableInput",label:"Clearable input",clearable:!0,onChange:t,onBlur:a,options:r}),o.a.createElement(k.f,{name:"requiredInput",label:"Required input",clearable:!0,onChange:t,onBlur:a,validators:[M.h.required],options:r}))};var se=function(e){var n=e.logMessage,t=function(e){n("onChange, value: "+JSON.stringify(e))},a=function(){n("onBlur")},r=[{label:"Option 1",value:"1"},{label:"Option 2",value:"2"}];return o.a.createElement(M.b,{className:"demo",plaintext:!0},o.a.createElement(k.f,{name:"myInput",label:"Normal input",onChange:t,onBlur:a,options:r,defaultValue:r[0]}),o.a.createElement(k.f,{name:"multiInput",label:"Multi input",multi:!0,onChange:t,onBlur:a,options:r,defaultValue:r}))},ce=t(501),pe=t.n(ce),de=t(502),fe=t.n(de),be=function(){return o.a.createElement(F,{title:"Select",description:"Defines a bootstrap form line containing a label and an input. Additionally it can render an info button and info alert as well as validation messages. If the user adds the required validator then it will mark the field as required as well.",parent:"bootstrap"},o.a.createElement(N,{title:"react-select",description:"Showcase of the react-select integration",component:ie,code:pe.a}),o.a.createElement(N,{title:"react-select plaintext mode",description:"Support for plaintext mode is provided out of the box.",component:se,code:fe.a}))};var he=function(){return o.a.createElement(M.b,{className:"demo"},o.a.createElement(k.g,{id:"demoSummary"}),o.a.createElement(k.d,{name:"requiredInput",label:"Required input",validators:[M.h.required]}),o.a.createElement("button",{type:"submit"},"Submit"),o.a.createElement("button",{type:"reset"},"Reset"))},ge=t(503),Ee=t.n(ge),ve=function(){return o.a.createElement(F,{title:"ValidationSummary",description:"Displays a clickable list of errors from the current form. When an error is clicked, the corresponding input field is focused.",parent:"bootstrap"},o.a.createElement(N,{title:"DatePicker",description:"Showcase of a simple validation summary. Push submit to see the error.",component:he,code:Ee.a}))},ye=function(){return o.a.createElement(r.a,null,o.a.createElement(l.a,{path:"/components/bootstrap/input/",component:oe}),o.a.createElement(l.a,{path:"/components/bootstrap/select/",component:be}),o.a.createElement(l.a,{path:"/components/bootstrap/check/",component:V}),o.a.createElement(l.a,{path:"/components/bootstrap/date-picker/",component:A}),o.a.createElement(l.a,{path:"/components/bootstrap/validation-summary/",component:ve}),o.a.createElement(l.a,{path:"/components/bootstrap/form-button/",component:W}),o.a.createElement(l.a,{path:"/components/bootstrap/on-off-toggle-button/",component:ue}),o.a.createElement(m.a,{from:"/components/bootstrap",to:"/components/bootstrap/input",exact:!0}),o.a.createElement(l.a,{path:"*",component:f.NotFound}))};function xe(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(M.e,{name:"first",label:"First name"}),o.a.createElement(M.e,{name:"last",label:"Last name"}))}var Se=function(e){var n=e.logMessage;return o.a.createElement(M.b,{className:"demo",onSubmit:function(e){n("onSubmit, values: "+JSON.stringify(e))}},o.a.createElement(M.a,{name:"mainContact",label:"Main contact",render:function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement("strong",null,"Main contact"),o.a.createElement(xe,null))}}),o.a.createElement(M.a,{name:"technicalContact",label:"Technical contact",render:function(){return o.a.createElement("div",{className:"mt-4"},o.a.createElement("strong",null,"Technical contact"),o.a.createElement(xe,null))}}),o.a.createElement(M.a,{name:"disabledContact",label:"Disabled contact",disabled:!0,render:function(){return o.a.createElement("div",{className:"mt-4"},o.a.createElement("strong",null,"Disabled contact"),o.a.createElement(xe,null))}}),o.a.createElement(M.a,{name:"plaintextContact",label:"Plaintext contact",plaintext:!0,values:{first:"Foo",last:"Bar"},render:function(){return o.a.createElement("div",{className:"mt-4"},o.a.createElement("strong",null,"Plaintext contact"),o.a.createElement(xe,null))}}),o.a.createElement("button",{type:"submit"},"Submit"))};var Fe=function(e){var n=e.logMessage;return o.a.createElement(M.b,{className:"demo",onSubmit:function(e){n("onSubmit, values: "+JSON.stringify(e))},defaultValues:{myGroup:{myInput1:"input 1",myInput2:"input 2"}}},o.a.createElement(M.a,{name:"myGroup",label:"Example group",render:function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(M.e,{name:"myInput1",label:"Example input"}),o.a.createElement(M.e,{name:"myInput2",label:"Example input 2"}))}}),o.a.createElement("button",{type:"submit"},"Submit"))},Ie=t(504),Ce=t.n(Ie),Be=t(505),Ne=t.n(Be),Me=function(){return o.a.createElement(F,{title:"FieldGroup",description:"Defines a collection of fields. It will combine its values to a sub-object and provides the possibility to attach validators to the group.",parent:"core"},o.a.createElement(N,{title:"Simple field group",description:"Showcase of a simple field group",component:Fe,code:Ne.a}),o.a.createElement(N,{title:"Reuse form parts",description:"A field group is a great way to reuse recurring fields.",component:Se,code:Ce.a}))};var ke=function(e){var n=e.logMessage;return o.a.createElement(M.b,{className:"demo"},o.a.createElement(M.e,{name:"myInput",label:"Example input",onChange:function(e){n("onChange, value: "+JSON.stringify(e))},onBlur:function(){n("onBlur")}}))};var we=function(e){var n=e.logMessage;return o.a.createElement(M.b,{className:"demo",onSubmit:function(e){n("onSubmit, values: "+JSON.stringify(e))}},o.a.createElement(M.e,{name:"myInput",label:"Example input",getDisplayValue:function(e,t){return n("getDisplayValue, value: "+JSON.stringify(e)+", meta: "+JSON.stringify(t)),"display value: "+e},getSubmitValue:function(e,t){return n("getSubmitValue, value: "+JSON.stringify(e)+", meta: "+JSON.stringify(t)),e.replace("display value:","submit value: ")}}),o.a.createElement("button",{type:"submit"},"Submit"),o.a.createElement("button",{type:"reset"},"Reset"))},Oe=t(506),Re=t.n(Oe),Ve=t(507),De=t.n(Ve),qe=function(){return o.a.createElement(F,{title:"Field",description:"Defines a form field which will be managed by the Form.",parent:"core"},o.a.createElement(N,{title:"Field callbacks",description:"Showcase of the field callbacks",component:ke,code:Re.a}),o.a.createElement(N,{title:"Value lifecycles",description:"Showcase of the field lifecycle hooks",component:we,code:De.a}))};var Pe=function(){return o.a.createElement(M.b,{className:"demo",disabled:!0},o.a.createElement(M.e,{name:"input",label:"Sample input"}),o.a.createElement(M.c,{type:"submit"},"Submit"),o.a.createElement(M.c,{type:"reset"},"Reset"))};var Je=function(e){var n=e.logMessage;return o.a.createElement(M.b,{className:"demo",onSubmit:function(e,t){n("onSubmit, values: "+JSON.stringify(e)+", submitArgs: "+JSON.stringify(t))}},o.a.createElement(M.e,{name:"input",label:"Sample input"}),o.a.createElement(M.c,{type:"submit",submitArgs:{foo:"bar"}},"Submit"),o.a.createElement(M.c,{type:"reset"},"Reset"))};function Te(e){return new Promise(function(n){setTimeout(function(){""===e?n("Invalid input"):n()},1e3)})}var je=function(e){return e.logMessage,o.a.createElement(M.b,{className:"demo"},o.a.createElement(M.e,{name:"input",label:"Sample input",asyncValidators:[Te]}),o.a.createElement(M.c,{type:"submit"},"Submit"),o.a.createElement(M.c,{type:"reset"},"Reset"))},Ae=t(508),Ye=t.n(Ae),Ge=t(509),Le=t.n(Ge),_e=t(510),ze=t.n(_e),He=function(){return o.a.createElement(F,{title:"FormButton",description:"Defines a button that integrates into the form context. It will be disabled when the form is busy or disabled. You can also pass submitArgs to the onSubmit handler this way.",parent:"core"},o.a.createElement(N,{title:"FormButton",description:"Showcase of the form button",component:je,code:ze.a}),o.a.createElement(N,{title:"Submit args",description:"Arguments to the form.onSubmit handler can be passed this way",component:Je,code:Le.a}),o.a.createElement(N,{title:"Disabled form",description:"FormButtons are disabled if the form is disabled too",component:Pe,code:Ye.a}))},Ue=function(e){function n(){var e,t;Object(h.a)(this,n);for(var a=arguments.length,o=new Array(a),r=0;r<a;r++)o[r]=arguments[r];return(t=Object(E.a)(this,(e=Object(v.a)(n)).call.apply(e,[this].concat(o)))).state={defaultValues:{myInput:"default value"}},t.handleSubmit=function(e){(0,t.props.logMessage)("onSubmit, values: "+JSON.stringify(e))},t.randomizeDefaultValues=function(){t.setState({defaultValues:{myInput:"default ".concat(Math.floor(100*Math.random()))}})},t}return Object(y.a)(n,e),Object(g.a)(n,[{key:"render",value:function(){var e=this.state.defaultValues;return o.a.createElement(M.b,{className:"demo",onSubmit:this.handleSubmit,defaultValues:e},o.a.createElement(M.e,{name:"myInput",label:"Example input"}),o.a.createElement("p",{className:"mt-4"},"Current default value: ",e.myInput),o.a.createElement("button",{type:"submit"},"Submit"),o.a.createElement("button",{type:"reset"},"Reset"),o.a.createElement("button",{type:"button",onClick:this.randomizeDefaultValues,className:"ml-1"},"Update default values"))}}]),n}(o.a.Component);var We=function(e){var n=e.logMessage;return o.a.createElement(M.b,{className:"demo",onSubmit:function(e){n("onSubmit, values: "+JSON.stringify(e))},disabled:!0},o.a.createElement(M.e,{name:"myInput",label:"Example input 1"}),o.a.createElement(M.e,{name:"myInput2",label:"Example input 2"}),o.a.createElement("button",{type:"submit"},"Submit"))};var Ze=function(e){var n=e.logMessage;return o.a.createElement(M.b,{className:"demo",onSubmit:function(e){n("onSubmit, values: "+JSON.stringify(e))},onReset:function(){n("onReset")},onValidate:function(e){return"bad"===e.demoInput?{demoInput:"Invalid input!"}:null}},o.a.createElement(M.f,{id:"summary"}),o.a.createElement(M.e,{name:"demoInput",label:"Example input"}),o.a.createElement("button",{type:"submit"},"Submit"),o.a.createElement("button",{type:"reset"},"Reset"))},$e=function(e){function n(){var e,t;Object(h.a)(this,n);for(var a=arguments.length,o=new Array(a),r=0;r<a;r++)o[r]=arguments[r];return(t=Object(E.a)(this,(e=Object(v.a)(n)).call.apply(e,[this].concat(o)))).state={values:{myInput:"demo value"}},t.handleSubmit=function(e){(0,t.props.logMessage)("onSubmit, values: "+JSON.stringify(e))},t.randomizeValues=function(){t.setState({values:{myInput:"demo ".concat(Math.floor(100*Math.random()))}})},t}return Object(y.a)(n,e),Object(g.a)(n,[{key:"render",value:function(){var e=this.state.values;return o.a.createElement(M.b,{className:"demo",onSubmit:this.handleSubmit,values:e},o.a.createElement(M.e,{name:"myInput",label:"Example input"}),o.a.createElement("button",{type:"submit"},"Submit"),o.a.createElement("button",{type:"reset"},"Reset"),o.a.createElement("button",{type:"button",onClick:this.randomizeValues,className:"ml-1"},"Update values"))}}]),n}(o.a.Component);var Ke=function(e){return e.logMessage,o.a.createElement(M.b,{className:"demo",defaultValues:{myInput:"default value 1",myInput2:"default value 2"},plaintext:!0},o.a.createElement(M.e,{name:"myInput",label:"Example input 1"}),o.a.createElement(M.e,{name:"myInput2",label:"Example input 2"}))};var Qe=function(e){var n=e.logMessage;return o.a.createElement(M.b,{className:"demo",onSubmit:function(e){n("onSubmit, values: "+JSON.stringify(e))},onReset:function(){n("onReset")}},o.a.createElement(M.e,{name:"myInput",label:"Example input"}),o.a.createElement("button",{type:"submit"},"Submit"),o.a.createElement("button",{type:"reset"},"Reset"))},Xe=t(511),en=t.n(Xe),nn=t(512),tn=t.n(nn),an=t(513),on=t.n(an),rn=t(514),ln=t.n(rn),mn=t(515),un=t.n(mn),sn=t(516),cn=t.n(sn),pn=function(){return o.a.createElement(F,{title:"Form",description:"The form is the main component. It glues together all the Form logic through React's new Context api.",parent:"core"},o.a.createElement(N,{title:"Simple form",description:"Showcase of a simple form",component:Qe,code:cn.a}),o.a.createElement(N,{title:"Default values",description:"Provide the form with default values that should be displayed on load. Note how the default value won't update the Field, if the user changed the input. However, on form reset the default value will be used again.",component:Ue,code:en.a}),o.a.createElement(N,{title:"Values",description:"Override the values of the form fields. Changing those values will override the Field value, even if the user changed it.",component:$e,code:ln.a}),o.a.createElement(N,{title:"Disabled form",description:"Setting the disabled prop will disable all form fields.",component:We,code:tn.a}),o.a.createElement(N,{title:"Plaintext form",description:"Setting the plaintext prop will show all form fields in a text-only mode.",component:Ke,code:un.a}),o.a.createElement(N,{title:"Form-wide validation",description:"Use a form-wide validation function before submit. Notice that the onSubmit callback is not invoked if you type 'bad' into the input.",component:Ze,code:on.a}))};var dn=function(){return o.a.createElement(M.b,null,o.a.createElement("p",null,o.a.createElement(M.d,{text:"Demo output"})),o.a.createElement("p",null,o.a.createElement(M.d,{text:"Output with parameters: {param}",values:{param:"Demo value"}})))},fn=t(517),bn=t.n(fn),hn=function(){return a.createElement(F,{title:"FormText",description:"Wrapper for text output. It will use the Form.stringFormatter function to output the message passed through the props. Best practice for custom input component development is to pass every text output through the stringFormatter. This enables the user of the form to add the react-ocean-forms-react-intl package and get i18n support out of the box.",parent:"core"},a.createElement(N,{title:"FormText",description:"Showcase of the form text",component:dn,code:bn.a}),a.createElement("h2",null,"Usage with i18n"),a.createElement("p",null,"The ",a.createElement("mark",null,"FormText")," component is best used in an internationalization context. The showcase page of ",a.createElement(u.a,{to:"../intl/intl-form"},"IntlForm")," contains a ",a.createElement("mark",null,"FormText")," component as well."))};var gn=Object(M.i)(function(e){var n=e.field,t=e.label,a=e.type,r=e.meta,l=e.customProp;return o.a.createElement("div",null,o.a.createElement("div",null,o.a.createElement("label",{htmlFor:n.id},o.a.createElement("strong",null,r.stringFormatter(t)))),o.a.createElement("input",Object.assign({type:a},n)),l)});var En=function(e){var n=e.logMessage;return o.a.createElement(M.b,{className:"demo",onSubmit:function(e){n("onSubmit, values: "+JSON.stringify(e))}},o.a.createElement(gn,{name:"myCustomInput",label:"Input with info text",onChange:function(e){n("onChange, value: "+JSON.stringify(e))},onBlur:function(){n("onBlur")},customProp:"custom text"}),o.a.createElement("button",{type:"submit"},"Submit"),o.a.createElement("button",{type:"reset"},"Reset"))};var vn=function(e){var n=e.logMessage,t=function(e){n("onChange, value: "+JSON.stringify(e))},a=function(){n("onBlur")};return o.a.createElement(M.b,{className:"demo"},o.a.createElement(M.e,{name:"myInput",label:"Number input",onChange:t,onBlur:a,type:"number"}),o.a.createElement(M.e,{name:"myInput2",label:"Date input",onChange:t,onBlur:a,type:"date"}))},yn=t(518),xn=t.n(yn),Sn=t(519),Fn=t.n(Sn),In=function(){return o.a.createElement(F,{title:"Input",description:"Defines a form line containing a label and an input. Additionally it can render an info button and info alert as well as validation messages. If the user adds the required validator then it will mark the field as required as well.",parent:"core"},o.a.createElement(N,{title:"Input types",description:"Showcase of the input type support",component:vn,code:Fn.a}),o.a.createElement(N,{title:"Custom input",description:"Creating your own input components is quite simple. Note that if you want to use the flexible Intl support, you should put all your text outputs through meta.stringFormatter.",component:En,code:xn.a}))};var Cn=function(e){return e.logMessage,o.a.createElement(M.b,{className:"demo"},o.a.createElement(M.f,{id:"summary"}),o.a.createElement(M.e,{name:"input1",label:"Example input 1",validators:[M.h.required]}),o.a.createElement(M.e,{name:"input2",label:"Example input 2",validators:[M.h.required]}),o.a.createElement("button",{type:"submit"},"Submit"),o.a.createElement("button",{type:"reset"},"Reset"))},Bn=t(520),Nn=t.n(Bn),Mn=function(){return o.a.createElement(F,{title:"ValidationSummary",description:"Displays a clickable list of errors from the current form. When an error is clicked, the corresponding input field is focused.",parent:"core"},o.a.createElement(N,{title:"Showcase",description:"Showcase of the validation summary. Click on submit to display the summary.",component:Cn,code:Nn.a}))},kn=function(){return o.a.createElement(r.a,null,o.a.createElement(l.a,{path:"/components/core/form/",component:pn}),o.a.createElement(l.a,{path:"/components/core/field/",component:qe}),o.a.createElement(l.a,{path:"/components/core/field-group/",component:Me}),o.a.createElement(l.a,{path:"/components/core/validation-summary/",component:Mn}),o.a.createElement(l.a,{path:"/components/core/input/",component:In}),o.a.createElement(l.a,{path:"/components/core/form-button/",component:He}),o.a.createElement(l.a,{path:"/components/core/form-text/",component:hn}),o.a.createElement(m.a,{from:"/components/core",to:"/components/core/form",exact:!0}),o.a.createElement(l.a,{path:"*",component:f.NotFound}))},wn=t(425),On=t(544),Rn=t.n(On),Vn=t(545),Dn=function(e){function n(){var e,t;Object(h.a)(this,n);for(var a=arguments.length,o=new Array(a),r=0;r<a;r++)o[r]=arguments[r];return(t=Object(E.a)(this,(e=Object(v.a)(n)).call.apply(e,[this].concat(o)))).state={locale:"en"},t.messages={en:{lblName:"First name",lblMail:"E-Mail",submit:"Submit",reset:"Reset",customText:"My example text",ojs_field_required:"This field is required!",ojs_error_required:"This field is required!"},de:{lblName:"Vorname",lblMail:"E-Mail",submit:"Senden",reset:"Zur\xfccksetzen",customText:"Mein Beispieltext",ojs_field_required:"Pflichtfeld!",ojs_error_required:"Dieses Feld muss ausgef\xfcllt werden!"}},t}return Object(y.a)(n,e),Object(g.a)(n,[{key:"render",value:function(){var e=this,n=this.state.locale;return Object(wn.c)(Rn.a),o.a.createElement(wn.b,{locale:n,messages:this.messages[n]},o.a.createElement(Vn.a,{className:"demo"},o.a.createElement("p",null,o.a.createElement(C.a,{className:"mr-2",onClick:function(){return e.setState({locale:"en"})}},"English"),o.a.createElement(C.a,{className:"mr-2",onClick:function(){return e.setState({locale:"de"})}},"German")),o.a.createElement(k.d,{name:"name",label:"lblName",validators:[M.h.required]}),o.a.createElement(k.d,{name:"mail",label:"lblMail"}),o.a.createElement("p",null,o.a.createElement(M.d,{text:"customText"})),o.a.createElement(k.c,{color:"primary"},o.a.createElement(wn.a,{id:"submit"})),o.a.createElement(k.c,{type:"reset"},o.a.createElement(wn.a,{id:"reset"}))))}}]),n}(o.a.Component),qn=t(546),Pn=t.n(qn),Jn=function(){return o.a.createElement(F,{title:"IntlForm",description:"Drop-in replacement for regular Form component. Enables react-intl support. Must live inside a IntlProvider.",parent:"intl"},o.a.createElement(N,{title:"Localized form",description:"Showcase of the i18n support",component:Dn,code:Pn.a}))},Tn=function(){return o.a.createElement(r.a,null,o.a.createElement(l.a,{path:"/components/intl/intl-form",component:Jn}),o.a.createElement(m.a,{from:"/components/intl",to:"/components/intl/intl-form",exact:!0}),o.a.createElement(l.a,{path:"*",component:f.NotFound}))},jn=function(){return o.a.createElement(i.a,null,o.a.createElement(s.a,{md:"8"},o.a.createElement(r.a,null,o.a.createElement(l.a,{path:"/components/core",component:kn}),o.a.createElement(l.a,{path:"/components/bootstrap",component:ye}),o.a.createElement(l.a,{path:"/components/intl",component:Tn}),o.a.createElement(m.a,{from:"/components",to:"/components/core/form",exact:!0}),o.a.createElement(l.a,{path:"*",component:f.NotFound}))),o.a.createElement(s.a,{md:"4"},o.a.createElement(c.a,{vertical:!0},o.a.createElement("h6",null,"react-ocean-forms"),o.a.createElement(p.a,{tag:u.a,to:"/components/core/form/"},"Form"),o.a.createElement(p.a,{tag:u.a,to:"/components/core/field/"},"Field"),o.a.createElement(p.a,{tag:u.a,to:"/components/core/field-group/"},"FieldGroup"),o.a.createElement(p.a,{tag:u.a,to:"/components/core/validation-summary/"},"ValidationSummary"),o.a.createElement(p.a,{tag:u.a,to:"/components/core/input/"},"Input"),o.a.createElement(p.a,{tag:u.a,to:"/components/core/form-button/"},"FormButton"),o.a.createElement(p.a,{tag:u.a,to:"/components/core/form-text/"},"FormText")),o.a.createElement(c.a,{vertical:!0},o.a.createElement("h6",{className:"mt-4"},"react-ocean-forms-bootstrap"),o.a.createElement(p.a,{tag:u.a,to:"/components/bootstrap/input/"},"Input"),o.a.createElement(p.a,{tag:u.a,to:"/components/bootstrap/select/"},"Select"),o.a.createElement(p.a,{tag:u.a,to:"/components/bootstrap/check/"},"Check"),o.a.createElement(p.a,{tag:u.a,to:"/components/bootstrap/date-picker/"},"DatePicker"),o.a.createElement(p.a,{tag:u.a,to:"/components/bootstrap/validation-summary/"},"ValidationSummary"),o.a.createElement(p.a,{tag:u.a,to:"/components/bootstrap/form-button/"},"FormButton"),o.a.createElement(p.a,{tag:u.a,to:"/components/bootstrap/on-off-toggle-button/"},"OnOffToggleButton")),o.a.createElement(c.a,{vertical:!0},o.a.createElement("h6",{className:"mt-4"},"react-ocean-forms-react-intl"),o.a.createElement(d.a,null,o.a.createElement(p.a,{tag:u.a,to:"/components/intl/intl-form/"},"IntlForm")))))},An=jn;t.d(n,"Components",function(){return jn}),t.d(n,"AsyncPage",function(){return An})}}]);
//# sourceMappingURL=156.3f6b8f8e.chunk.js.map