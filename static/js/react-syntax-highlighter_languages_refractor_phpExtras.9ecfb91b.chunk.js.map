{"version":3,"sources":["../node_modules/refractor/lang/php.js","../node_modules/refractor/lang/php-extras.js"],"names":["php","Prism","languages","extend","keyword","constant","comment","pattern","lookbehind","insertBefore","shell-comment","alias","delimiter","variable","package","inside","punctuation","property","nowdoc-string","greedy","heredoc-string","interpolation","single-quoted-string","double-quoted-string","string_interpolation","rest","hooks","add","env","test","code","buildPlaceholders","tokenizePlaceholders","module","exports","displayName","aliases","refractorPhp","__webpack_require__","phpExtras","register","this","global","scope"],"mappings":"gGAMA,SAAAA,EAAAC,IAeA,SAAAA,GACAA,EAAAC,UAAAF,IAAAC,EAAAC,UAAAC,OAAA,SACAC,QAAA,4aACAC,SAAA,oBACAC,QAAA,CACAC,QAAA,uCACAC,YAAA,KAGAP,EAAAC,UAAAO,aAAA,gBACAC,gBAAA,CACAH,QAAA,eACAC,YAAA,EACAG,MAAA,aAGAV,EAAAC,UAAAO,aAAA,iBACAG,UAAA,CACAL,QAAA,qBACAI,MAAA,aAEAE,SAAA,sBACAC,QAAA,CACAP,QAAA,kCACAC,YAAA,EACAO,OAAA,CACAC,YAAA,SAKAf,EAAAC,UAAAO,aAAA,kBACAQ,SAAA,CACAV,QAAA,YACAC,YAAA,KAGAP,EAAAC,UAAAO,aAAA,gBACAS,gBAAA,CACAX,QAAA,kDACAY,QAAA,EACAR,MAAA,SACAI,OAAA,CACAH,UAAA,CACAL,QAAA,2BACAI,MAAA,SACAI,OAAA,CACAC,YAAA,mBAKAI,iBAAA,CACAb,QAAA,sGACAY,QAAA,EACAR,MAAA,SACAI,OAAA,CACAH,UAAA,CACAL,QAAA,yCACAI,MAAA,SACAI,OAAA,CACAC,YAAA,iBAGAK,cAAA,OAIAC,uBAAA,CACAf,QAAA,yBACAY,QAAA,EACAR,MAAA,UAEAY,uBAAA,CACAhB,QAAA,yBACAY,QAAA,EACAR,MAAA,SACAI,OAAA,CACAM,cAAA,gBAMApB,EAAAC,UAAAF,IAAA,OACA,IAAAwB,EAAA,CACAjB,QAAA,6EACAC,YAAA,EACAO,OAAA,CACAU,KAAAxB,EAAAC,UAAAF,MAGAC,EAAAC,UAAAF,IAAA,kBAAAe,OAAA,cAAAS,EACAvB,EAAAC,UAAAF,IAAA,wBAAAe,OAAA,cAAAS,EACAvB,EAAAyB,MAAAC,IAAA,2BAAAC,GACA,sBAAAC,KAAAD,EAAAE,MAAA,CAKA7B,EAAAC,UAAA,qBAAA6B,kBAAAH,EAAA,MADA,wCAGA3B,EAAAyB,MAAAC,IAAA,0BAAAC,GACA3B,EAAAC,UAAA,qBAAA8B,qBAAAJ,EAAA,SAvGA,CAyGG3B,GA5HHgC,EAAAC,QAAAlC,EACAA,EAAAmC,YAAA,MACAnC,EAAAoC,QAAA,qCCFA,IAAAC,EAAmBC,EAAQ,KAM3B,SAAAC,EAAAtC,GACAA,EAAAuC,SAAAH,GACApC,EAAAC,UAAAO,aAAA,kBACAgC,KAAA,WACAC,OAAA,uIACAC,MAAA,CACApC,QAAA,cACAQ,OAAA,CACAX,QAAA,qBACAY,YAAA,YAbAiB,EAAAC,QAAAK,EACAA,EAAAJ,YAAA,YACAI,EAAAH,QAAA","file":"static/js/react-syntax-highlighter_languages_refractor_phpExtras.9ecfb91b.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = php;\nphp.displayName = 'php';\nphp.aliases = [];\n\nfunction php(Prism) {\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   *\n   * Supports the following:\n   *      - Extends clike syntax\n   *      - Support for PHP 5.3+ (namespaces, traits, generators, etc)\n   *      - Smarter constant and function matching\n   *\n   * Adds the following new token classes:\n   *      constant, delimiter, variable, function, package\n   */\n  ;\n\n  (function (Prism) {\n    Prism.languages.php = Prism.languages.extend('clike', {\n      keyword: /\\b(?:and|or|xor|array|as|break|case|cfunction|class|const|continue|declare|default|die|do|else|elseif|enddeclare|endfor|endforeach|endif|endswitch|endwhile|extends|for|foreach|function|include|include_once|global|if|new|return|static|switch|use|require|require_once|var|while|abstract|interface|public|implements|private|protected|parent|throw|null|echo|print|trait|namespace|final|yield|goto|instanceof|finally|try|catch)\\b/i,\n      constant: /\\b[A-Z0-9_]{2,}\\b/,\n      comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true\n      }\n    });\n    Prism.languages.insertBefore('php', 'string', {\n      'shell-comment': {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true,\n        alias: 'comment'\n      }\n    });\n    Prism.languages.insertBefore('php', 'keyword', {\n      delimiter: {\n        pattern: /\\?>|<\\?(?:php|=)?/i,\n        alias: 'important'\n      },\n      variable: /\\$+(?:\\w+\\b|(?={))/i,\n      package: {\n        pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }\n    }); // Must be defined after the function pattern\n\n    Prism.languages.insertBefore('php', 'operator', {\n      property: {\n        pattern: /(->)[\\w]+/,\n        lookbehind: true\n      }\n    });\n    Prism.languages.insertBefore('php', 'string', {\n      'nowdoc-string': {\n        pattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          delimiter: {\n            pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<'?|[';]$/\n            }\n          }\n        }\n      },\n      'heredoc-string': {\n        pattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          delimiter: {\n            pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<\"?|[\";]$/\n            }\n          },\n          interpolation: null // See below\n\n        }\n      },\n      'single-quoted-string': {\n        pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n        greedy: true,\n        alias: 'string'\n      },\n      'double-quoted-string': {\n        pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          interpolation: null // See below\n\n        }\n      }\n    }); // The different types of PHP strings \"replace\" the C-like standard string\n\n    delete Prism.languages.php['string'];\n    var string_interpolation = {\n      pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n      lookbehind: true,\n      inside: {\n        rest: Prism.languages.php\n      }\n    };\n    Prism.languages.php['heredoc-string'].inside['interpolation'] = string_interpolation;\n    Prism.languages.php['double-quoted-string'].inside['interpolation'] = string_interpolation;\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (!/(?:<\\?php|<\\?)/gi.test(env.code)) {\n        return;\n      }\n\n      var phpPattern = /(?:<\\?php|<\\?)[\\s\\S]*?(?:\\?>|$)/gi;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n    });\n  })(Prism);\n}","'use strict';\n\nvar refractorPhp = require('./php.js');\n\nmodule.exports = phpExtras;\nphpExtras.displayName = 'phpExtras';\nphpExtras.aliases = [];\n\nfunction phpExtras(Prism) {\n  Prism.register(refractorPhp);\n  Prism.languages.insertBefore('php', 'variable', {\n    this: /\\$this\\b/,\n    global: /\\$(?:_(?:SERVER|GET|POST|FILES|REQUEST|SESSION|ENV|COOKIE)|GLOBALS|HTTP_RAW_POST_DATA|argc|argv|php_errormsg|http_response_header)\\b/,\n    scope: {\n      pattern: /\\b[\\w\\\\]+::/,\n      inside: {\n        keyword: /static|self|parent/,\n        punctuation: /::|\\\\/\n      }\n    }\n  });\n}"],"sourceRoot":""}