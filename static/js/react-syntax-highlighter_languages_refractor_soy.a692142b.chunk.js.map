{"version":3,"sources":["../node_modules/refractor/lang/soy.js"],"names":["soy","Prism","stringPattern","numberPattern","languages","comment","pattern","lookbehind","greedy","command-arg","alias","inside","punctuation","parameter","keyword","delimiter","property","variable","string","number","function","boolean","operator","hooks","add","env","soyLitteralMode","buildPlaceholders","match","tokenizePlaceholders","module","exports","displayName","aliases"],"mappings":"4FAMA,SAAAA,EAAAC,IAGA,SAAAA,GACA,IAAAC,EAAA,iDACAC,EAAA,oDACAF,EAAAG,UAAAJ,IAAA,CACAK,QAAA,qBACAC,QAAA,aACAC,YAAA,EACAC,QAAA,IAEAC,cAAA,CACAH,QAAA,yFACAC,YAAA,EACAG,MAAA,SACAC,OAAA,CACAC,YAAA,OAGAC,UAAA,CACAP,QAAA,mCACAC,YAAA,EACAG,MAAA,YAEAI,QAAA,EACAR,QAAA,kNACAC,YAAA,GACO,2FACPQ,UAAA,CACAT,QAAA,gBACAI,MAAA,eAEAM,SAAA,WACAC,SAAA,CACAX,QAAA,0CACAK,OAAA,CACAO,OAAA,CACAZ,QAAAJ,EACAM,QAAA,GAEAW,OAAAhB,EACAS,YAAA,aAGAM,OAAA,CACAZ,QAAAJ,EACAM,QAAA,GAEAY,SAAA,cACAd,QAAA,oBACAC,YAAA,IAEAc,QAAA,qBACAF,OAAAhB,EACAmB,SAAA,kDACAV,YAAA,kBAGAX,EAAAsB,MAAAC,IAAA,2BAAAC,GACA,IAGAC,GAAA,EACAzB,EAAAG,UAAA,qBAAAuB,kBAAAF,EAAA,MAJA,2CAIA,SAAAG,GAMA,MARA,eAIAA,IACAF,GAAA,IAGAA,IATA,cAUAE,IACAF,GAAA,IAGA,OAOAzB,EAAAsB,MAAAC,IAAA,0BAAAC,GACAxB,EAAAG,UAAA,qBAAAyB,qBAAAJ,EAAA,SAhFA,CAkFGxB,GAzFH6B,EAAAC,QAAA/B,EACAA,EAAAgC,YAAA,MACAhC,EAAAiC,QAAA","file":"static/js/react-syntax-highlighter_languages_refractor_soy.a692142b.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = soy;\nsoy.displayName = 'soy';\nsoy.aliases = [];\n\nfunction soy(Prism) {\n  ;\n\n  (function (Prism) {\n    var stringPattern = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n    var numberPattern = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/;\n    Prism.languages.soy = {\n      comment: [/\\/\\*[\\s\\S]*?\\*\\//, {\n        pattern: /(\\s)\\/\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }],\n      'command-arg': {\n        pattern: /({+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      parameter: {\n        pattern: /({+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      keyword: [{\n        pattern: /({+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,\n        lookbehind: true\n      }, /\\b(?:any|as|attributes|bool|css|float|in|int|js|html|list|map|null|number|string|uri)\\b/],\n      delimiter: {\n        pattern: /^{+\\/?|\\/?}+$/,\n        alias: 'punctuation'\n      },\n      property: /\\w+(?==)/,\n      variable: {\n        pattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+]))*/,\n        inside: {\n          string: {\n            pattern: stringPattern,\n            greedy: true\n          },\n          number: numberPattern,\n          punctuation: /[\\[\\].?]/\n        }\n      },\n      string: {\n        pattern: stringPattern,\n        greedy: true\n      },\n      function: [/\\w+(?=\\()/, {\n        pattern: /(\\|[^\\S\\r\\n]*)\\w+/,\n        lookbehind: true\n      }],\n      boolean: /\\b(?:true|false)\\b/,\n      number: numberPattern,\n      operator: /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,\n      punctuation: /[{}()\\[\\]|.,:]/ // Tokenize all inline Soy expressions\n\n    };\n    Prism.hooks.add('before-tokenize', function (env) {\n      var soyPattern = /{{.+?}}|{.+?}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g;\n      var soyLitteralStart = '{literal}';\n      var soyLitteralEnd = '{/literal}';\n      var soyLitteralMode = false;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'soy', soyPattern, function (match) {\n        // Soy tags inside {literal} block are ignored\n        if (match === soyLitteralEnd) {\n          soyLitteralMode = false;\n        }\n\n        if (!soyLitteralMode) {\n          if (match === soyLitteralStart) {\n            soyLitteralMode = true;\n          }\n\n          return true;\n        }\n\n        return false;\n      });\n    }); // Re-insert the tokens after tokenizing\n\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'soy');\n    });\n  })(Prism);\n}"],"sourceRoot":""}