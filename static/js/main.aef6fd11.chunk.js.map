{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","lazy","Object","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","Promise","all","__webpack_require__","e","then","bind","t0","sent","abrupt","default","stop","this","Components","_callee2","_context2","Api","_callee3","_context3","NotFound","_callee4","_context4","Boolean","window","location","hostname","match","ReactDOM","react_default","createElement","_useState","useState","_useState2","slicedToArray","isOpen","setOpen","HashRouter","className","Navbar","dark","color","expand","fixed","NavbarBrand","tag","Link","to","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","href","react","fallback","Switch","Route","path","exact","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aef6fd11.chunk.js","sourcesContent":["import React, { lazy, Suspense, useState } from 'react';\nimport { HashRouter, Link, Route, Switch } from 'react-router-dom';\nimport { Collapse, Nav, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\n\nconst Home = lazy(async () => { return { default: (await import('./views/home')).Home }; });\nconst Components = lazy(async () => { return { default: (await import('./views/components')).Components }; });\nconst Api = lazy(async () => { return { default: (await import('./views/api')).Api }; });\nconst NotFound = lazy(async () => { return { default: (await import('./views/not-found')).NotFound }; });\n\nexport const App: React.FunctionComponent = () => {\n  const [isOpen, setOpen] = useState(false);\n  const toggle = () => { setOpen(!isOpen); };\n\n  return (\n    <HashRouter>\n      <div className=\"App\">\n        <Navbar dark color=\"dark\" expand=\"md\" fixed=\"top\">\n          <NavbarBrand tag={Link} to=\"/\">Ocean Forms</NavbarBrand>\n          <NavbarToggler onClick={toggle} />\n          <Collapse isOpen={isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n              <NavItem>\n                <NavLink tag={Link} to=\"/components\">Components</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink tag={Link} to=\"/api\">API</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink href=\"https://github.com/environment-agency-austria/react-ocean-forms\">GitHub</NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n\n        <div className=\"content container\">\n          <Suspense fallback={<div>Loading...</div>}>\n            <Switch>\n              <Route path=\"/\" exact component={Home} />\n              <Route path=\"/components\" component={Components} />\n              <Route path=\"/api\" component={Api} />\n              <Route path=\"*\" component={NotFound} />\n            </Switch>\n          </Suspense>\n        </div>\n      </div>\n    </HashRouter>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport * as ReactDOM from 'react-dom';\n\n// tslint:disable-next-line:no-import-side-effect\nimport 'babel-polyfill';\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'react-datetime/css/react-datetime.css';\n\nimport { App } from './App';\nimport { unregister } from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement,\n);\n\nunregister();\n"],"sourceRoot":""}