{"version":3,"sources":["../node_modules/refractor/lang/ruby.js","../node_modules/refractor/lang/erb.js"],"names":["ruby","Prism","languages","extend","comment","pattern","greedy","keyword","interpolation","inside","delimiter","alias","rest","insertBefore","regex","lookbehind","variable","symbol","builtin","constant","string","module","exports","displayName","aliases","refractorRuby","__webpack_require__","erb","register","hooks","add","env","buildPlaceholders","tokenizePlaceholders"],"mappings":"+FAMA,SAAAA,EAAAC,IASA,SAAAA,GACAA,EAAAC,UAAAF,KAAAC,EAAAC,UAAAC,OAAA,SACAC,QAAA,QACAC,QAAA,+CACAC,QAAA,IAEAC,QAAA,yRAEA,IAAAC,EAAA,CACAH,QAAA,aACAI,OAAA,CACAC,UAAA,CACAL,QAAA,WACAM,MAAA,OAEAC,KAAAX,EAAAC,UAAAF,OAGAC,EAAAC,UAAAW,aAAA,kBACAC,MAAA,EACAT,QAAA,+DACAC,QAAA,EACAG,OAAA,CACAD,kBAEO,CACPH,QAAA,wCACAC,QAAA,EACAG,OAAA,CACAD,kBAEO,CAEPH,QAAA,yDACAC,QAAA,EACAG,OAAA,CACAD,kBAEO,CACPH,QAAA,0CACAC,QAAA,EACAG,OAAA,CACAD,kBAEO,CACPH,QAAA,sCACAC,QAAA,EACAG,OAAA,CACAD,kBAEO,CACPH,QAAA,+EACAU,YAAA,EACAT,QAAA,IAEAU,SAAA,+BACAC,OAAA,CACAZ,QAAA,mCACAU,YAAA,KAGAd,EAAAC,UAAAW,aAAA,iBACAK,QAAA,+OACAC,SAAA,0BAEAlB,EAAAC,UAAAF,KAAAoB,OAAA,EACAf,QAAA,+DACAC,QAAA,EACAG,OAAA,CACAD,kBAEK,CACLH,QAAA,wCACAC,QAAA,EACAG,OAAA,CACAD,kBAEK,CAELH,QAAA,yDACAC,QAAA,EACAG,OAAA,CACAD,kBAEK,CACLH,QAAA,0CACAC,QAAA,EACAG,OAAA,CACAD,kBAEK,CACLH,QAAA,sCACAC,QAAA,EACAG,OAAA,CACAD,kBAEK,CACLH,QAAA,2DACAC,QAAA,EACAG,OAAA,CACAD,mBApGA,CAuGGP,GApHHoB,EAAAC,QAAAtB,EACAA,EAAAuB,YAAA,OACAvB,EAAAwB,QAAA,qCCFA,IAAAC,EAAoBC,EAAQ,KAM5B,SAAAC,EAAA1B,GACAA,EAAA2B,SAAAH,GAEA,SAAAxB,GACAA,EAAAC,UAAAyB,IAAA1B,EAAAC,UAAAC,OAAA,WACAF,EAAAC,UAAAW,aAAA,iBACAH,UAAA,CACAL,QAAA,YACAM,MAAA,iBAGAV,EAAA4B,MAAAC,IAAA,2BAAAC,GAEA9B,EAAAC,UAAA,qBAAA8B,kBAAAD,EAAA,MADA,qBAGA9B,EAAA4B,MAAAC,IAAA,0BAAAC,GACA9B,EAAAC,UAAA,qBAAA+B,qBAAAF,EAAA,SAbA,CAeG9B,GAtBHoB,EAAAC,QAAAK,EACAA,EAAAJ,YAAA,MACAI,EAAAH,QAAA","file":"static/js/react-syntax-highlighter_languages_refractor_erb.16108453.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = ruby;\nruby.displayName = 'ruby';\nruby.aliases = [];\n\nfunction ruby(Prism) {\n  /**\n   * Original by Samuel Flores\n   *\n   * Adds the following new token classes:\n   *      constant, builtin, variable, symbol, regex\n   */\n  ;\n\n  (function (Prism) {\n    Prism.languages.ruby = Prism.languages.extend('clike', {\n      comment: [/#.*/, {\n        pattern: /^=begin(?:\\r?\\n|\\r)(?:.*(?:\\r?\\n|\\r))*?=end/m,\n        greedy: true\n      }],\n      keyword: /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/\n    });\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: 'tag'\n        },\n        rest: Prism.languages.ruby\n      }\n    };\n    Prism.languages.insertBefore('ruby', 'keyword', {\n      regex: [{\n        pattern: /%r([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        // Here we need to specifically allow interpolation\n        pattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,\n        lookbehind: true,\n        greedy: true\n      }],\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      symbol: {\n        pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n        lookbehind: true\n      }\n    });\n    Prism.languages.insertBefore('ruby', 'number', {\n      builtin: /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n      constant: /\\b[A-Z]\\w*(?:[?!]|\\b)/\n    });\n    Prism.languages.ruby.string = [{\n      pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      // Here we need to specifically allow interpolation\n      pattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /(\"|')(?:#\\{[^}]+\\}|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }];\n  })(Prism);\n}","'use strict';\n\nvar refractorRuby = require('./ruby.js');\n\nmodule.exports = erb;\nerb.displayName = 'erb';\nerb.aliases = [];\n\nfunction erb(Prism) {\n  Prism.register(refractorRuby);\n\n  (function (Prism) {\n    Prism.languages.erb = Prism.languages.extend('ruby', {});\n    Prism.languages.insertBefore('erb', 'comment', {\n      delimiter: {\n        pattern: /^<%=?|%>$/,\n        alias: 'punctuation'\n      }\n    });\n    Prism.hooks.add('before-tokenize', function (env) {\n      var erbPattern = /<%=?[\\s\\S]+?%>/g;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'erb', erbPattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'erb');\n    });\n  })(Prism);\n}"],"sourceRoot":""}