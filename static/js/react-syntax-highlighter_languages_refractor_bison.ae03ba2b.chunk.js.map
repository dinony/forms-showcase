{"version":3,"sources":["../node_modules/refractor/lang/c.js","../node_modules/refractor/lang/bison.js"],"names":["c","Prism","languages","extend","keyword","operator","number","insertBefore","macro","pattern","lookbehind","alias","inside","string","directive","constant","module","exports","displayName","aliases","refractorC","__webpack_require__","bison","register","delimiter","bison-variable","punctuation","rest","comment","property"],"mappings":"6FAMA,SAAAA,EAAAC,GACAA,EAAAC,UAAAF,EAAAC,EAAAC,UAAAC,OAAA,SACAC,QAAA,sUACAC,SAAA,uDACAC,OAAA,kEAEAL,EAAAC,UAAAK,aAAA,cACAC,MAAA,CAGAC,QAAA,qDACAC,YAAA,EACAC,MAAA,WACAC,OAAA,CAEAC,OAAA,CACAJ,QAAA,8CACAC,YAAA,GAGAI,UAAA,CACAL,QAAA,4GACAC,YAAA,EACAC,MAAA,aAKAI,SAAA,sIAEAd,EAAAC,UAAAF,EAAA,qBACAC,EAAAC,UAAAF,EAAA,QAnCAgB,EAAAC,QAAAjB,EACAA,EAAAkB,YAAA,IACAlB,EAAAmB,QAAA,qCCFA,IAAAC,EAAiBC,EAAQ,IAMzB,SAAAC,EAAArB,GACAA,EAAAsB,SAAAH,GACAnB,EAAAC,UAAAoB,MAAArB,EAAAC,UAAAC,OAAA,QACAF,EAAAC,UAAAK,aAAA,mBACAe,MAAA,CAIAb,QAAA,wBACAG,OAAA,CACAZ,EAAA,CAEAS,QAAA,0CACAG,OAAA,CACAY,UAAA,CACAf,QAAA,cACAE,MAAA,eAEAc,iBAAA,CACAhB,QAAA,2BACAE,MAAA,WACAC,OAAA,CACAc,YAAA,QAGAC,KAAA1B,EAAAC,UAAAF,IAGA4B,QAAA3B,EAAAC,UAAAF,EAAA4B,QACAf,OAAAZ,EAAAC,UAAAF,EAAAa,OACAgB,SAAA,WACAzB,QAAA,OACAE,OAAA,CACAG,QAAA,gCACAC,YAAA,GAEAgB,YAAA,wBAxCAV,EAAAC,QAAAK,EACAA,EAAAJ,YAAA,QACAI,EAAAH,QAAA","file":"static/js/react-syntax-highlighter_languages_refractor_bison.ae03ba2b.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = c;\nc.displayName = 'c';\nc.aliases = [];\n\nfunction c(Prism) {\n  Prism.languages.c = Prism.languages.extend('clike', {\n    keyword: /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,\n    operator: /-[>-]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/]/,\n    number: /(?:\\b0x[\\da-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]*/i\n  });\n  Prism.languages.insertBefore('c', 'string', {\n    macro: {\n      // allow for multiline macro definitions\n      // spaces after the # character compile fine with gcc\n      pattern: /(^\\s*)#\\s*[a-z]+(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n      lookbehind: true,\n      alias: 'property',\n      inside: {\n        // highlight the path of the include statement as a string\n        string: {\n          pattern: /(#\\s*include\\s*)(?:<.+?>|(\"|')(?:\\\\?.)+?\\2)/,\n          lookbehind: true\n        },\n        // highlight macro directives as keywords\n        directive: {\n          pattern: /(#\\s*)\\b(?:define|defined|elif|else|endif|error|ifdef|ifndef|if|import|include|line|pragma|undef|using)\\b/,\n          lookbehind: true,\n          alias: 'keyword'\n        }\n      }\n    },\n    // highlight predefined macros as constants\n    constant: /\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/\n  });\n  delete Prism.languages.c['class-name'];\n  delete Prism.languages.c['boolean'];\n}","'use strict';\n\nvar refractorC = require('./c.js');\n\nmodule.exports = bison;\nbison.displayName = 'bison';\nbison.aliases = [];\n\nfunction bison(Prism) {\n  Prism.register(refractorC);\n  Prism.languages.bison = Prism.languages.extend('c', {});\n  Prism.languages.insertBefore('bison', 'comment', {\n    bison: {\n      // This should match all the beginning of the file\n      // including the prologue(s), the bison declarations and\n      // the grammar rules.\n      pattern: /^[\\s\\S]*?%%[\\s\\S]*?%%/,\n      inside: {\n        c: {\n          // Allow for one level of nested braces\n          pattern: /%\\{[\\s\\S]*?%\\}|\\{(?:\\{[^}]*\\}|[^{}])*\\}/,\n          inside: {\n            delimiter: {\n              pattern: /^%?\\{|%?\\}$/,\n              alias: 'punctuation'\n            },\n            'bison-variable': {\n              pattern: /[$@](?:<[^\\s>]+>)?[\\w$]+/,\n              alias: 'variable',\n              inside: {\n                punctuation: /<|>/\n              }\n            },\n            rest: Prism.languages.c\n          }\n        },\n        comment: Prism.languages.c.comment,\n        string: Prism.languages.c.string,\n        property: /\\S+(?=:)/,\n        keyword: /%\\w+/,\n        number: {\n          pattern: /(^|[^@])\\b(?:0x[\\da-f]+|\\d+)/i,\n          lookbehind: true\n        },\n        punctuation: /%[%?]|[|:;\\[\\]<>]/\n      }\n    }\n  });\n}"],"sourceRoot":""}