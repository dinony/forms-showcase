(window.webpackJsonp=window.webpackJsonp||[]).push([[2,5],{35:function(e,t,a){"use strict";a.r(t);var n=a(1),l=a(559),r=function(){return n.createElement(n.Fragment,null,n.createElement("h1",null,"404 - Not Found"),n.createElement("p",null,"The page you've requested could not be found."),n.createElement(l.a,{to:"/"},"Go to homepage"))},o=r;a.d(t,"NotFound",function(){return r}),a.d(t,"AsyncPage",function(){return o})},385:function(e,t,a){"use strict";a.d(t,"a",function(){return u});var n=a(1),l=a(700),r=a(389),o=a.n(r),i=a(388),s=a.n(i),m=a(390),c=a.n(m);l.a.registerLanguage("jsx",s.a),l.a.registerLanguage("bash",o.a);var u=function(e){var t=e.code,a=e.language,r=void 0===a?"jsx":a;return n.createElement(l.a,{language:r,style:c.a},t)}},394:function(e,t,a){"use strict";function n(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}a.d(t,"a",function(){return n})},425:function(e,t){e.exports='import { Check } from \'react-ocean-forms-bootstrap\';\n\n<Check\n  name="demo"\n  label="lbl_demo"\n  />\n'},426:function(e,t){e.exports='import { DatePicker } from \'react-ocean-forms-bootstrap\';\n\n<DatePicker\n  name="demo"\n  label="lbl_demo"\n  />\n'},427:function(e,t){e.exports="import { Form } from 'react-ocean-forms';\nimport { FormButton } from 'react-ocean-forms-bootstrap';\n\n<Form>\n  <FormButton>Click me!</FormButton>\n</Form>\n"},428:function(e,t){e.exports='import { Input } from \'react-ocean-forms-bootstrap\';\n\n<Input\n  name="demo"\n  label="lbl_demo"\n  />\n'},429:function(e,t){e.exports='import { OnOffToggleButton } from \'react-ocean-forms-bootstrap\';\n\n<OnOffToggleButton\n  name="demo"\n  label="lbl_demo"\n  />\n'},430:function(e,t){e.exports="import { Select } from 'react-ocean-forms-bootstrap';\n\nconst options = [\n  { label: 'Option 1', value: 1 },\n  { label: 'Option 2', value: 2 },\n];\n\n<Select\n  name=\"demo\"\n  label=\"lbl_demo\"\n  options={options}\n/>\n"},431:function(e,t){e.exports="import { ValidationSummary } from 'react-ocean-forms-bootstrap';\n\n<ValidationSummary id=\"main-summary\" />\n"},432:function(e,t){e.exports='import { FieldGroup } from \'react-ocean-forms\';\n\n<FieldGroup\n  name="demo"\n  label="demo group"\n  render={(groupInfo) => renderGroup(groupInfo)}\n/>\n'},433:function(e,t){e.exports='import { Input } from \'react-ocean-forms\';\n\n<Input\n  name="demo"\n  label="lbl_demo"\n  />\n'},434:function(e,t){e.exports="import { FormButton } from 'react-ocean-forms';\n\n<FormButton>Submit</FormButton>\n"},435:function(e,t){e.exports="import { Form } from 'react-ocean-forms';\n\n<Form\n  onSubmit={this.handleSubmit}\n  onReset={this.handleReset}\n>\n  ...\n</Form>\n"},436:function(e,t){e.exports="{\n  field1: 'foo',\n  field2: 'bar',\n  demoGroup: {\n    field3: '42',\n  },\n}\n"},437:function(e,t){e.exports="import { FormText } from 'react-ocean-forms';\n\n<FormText text=\"demoText\" />\n"},438:function(e,t){e.exports="import React from 'react';\nimport { withField } from 'react-ocean-forms';\n\nfunction CustomInput(props) {\n  const { field, meta } = props;\n\n  // Optional implementation of the plaintext feature\n  if (meta.plaintext) {\n    return field.value;\n  }\n\n  return (\n    <input type=\"text\" {...field} />\n  );\n}\n\nexport default withField(CustomInput);\n"},439:function(e,t){e.exports='import CustomInput from \'./CustomInput\';\n\n<CustomInput\n  name="my-field"\n  label="My custom field"\n  />\n'},440:function(e,t){e.exports='import { Input } from \'react-ocean-forms\';\n\n<Input\n  name="demo"\n  label="lbl_demo"\n  />\n'},441:function(e,t){e.exports="import { ValidationSummary } from 'react-ocean-forms';\n\n<ValidationSummary id=\"main-summary\" />\n"},442:function(e,t){e.exports="import { Input } from 'react-ocean-forms';\nimport { CustomApi } from './myCustomApi';\n\nconst myValidator = async (value) => {\n  const result = await CustomApi.validateAtBackend(value);\n  if (result.valid === true) {\n    return undefined;\n  }\n\n  return 'Invalid value';\n};\n\n<Input\n  name=\"demo\"\n  label=\"lbl_demo\"\n  asyncValidators={[myValidator]}\n/>\n"},443:function(e,t){e.exports="import { Form, Input } from 'react-ocean-forms';\n\nconst myValidator = (values) => {\n  if (values.first === 'John' && values.last === 'Doe') {\n    return {\n      // This will mark both fields as invalid with\n      // the given error messages.\n      first: 'Invalid name!',\n      last: 'Invalid name!',\n    };\n  }\n\n  return null;\n};\n\n<Form onValidate={myValidator}>\n  <Input name=\"first\" label=\"First name\" />\n  <Input name=\"last\" label=\"Last name\" />\n</Form>\n"},444:function(e,t){e.exports="import { Input } from 'react-ocean-forms';\n\nconst myRequiredValidator = (value) => {\n  return value === 'OK' ? undefined : 'Value is not OK!';\n};\nmyRequiredValidator.isDefaultValidator = true;\n\n<Input\n  name=\"demo\"\n  label=\"lbl_demo\"\n  validators={[myValidator]}\n/>\n"},445:function(e,t){e.exports="import { Input } from 'react-ocean-forms';\n\nconst myValidator = (value) => {\n  return value === 'OK' ? undefined : 'Value is not OK!';\n};\n\n<Input\n  name=\"demo\"\n  label=\"lbl_demo\"\n  validators={[myValidator]}\n/>\n"},446:function(e,t){e.exports='// Error message\n"Field is invalid {customParam}"\n// Renders to\n"Field is invalid Foobar"\n'},447:function(e,t){e.exports="const errorObj = {\n  message_id: 'error-id',\n  params: {\n    customParam: 'Foobar',\n  },\n}\n"},448:function(e,t){e.exports='import { Input, validators } from \'react-ocean-forms\';\n\n<Input\n  name="demo"\n  label="lbl_demo"\n  validators={[validators.required]}\n/>\n'},449:function(e,t){e.exports='import { Input, validators } from \'react-ocean-forms\';\n\n<Input\n  name="demo"\n  label="lbl_demo"\n  validators={[validators.withParam(validators.minLength, 5)]}\n/>\n'},450:function(e,t){e.exports="import IntlForm from 'react-ocean-forms-react-intl';\n\n<IntlForm>\n  ...\n</IntlForm>\n"},557:function(e,t,a){"use strict";var n=a(1),l=a.n(n),r=a(0),o=a.n(r),i=a(20),s=a.n(i),m=a(19),c=a.n(m),u=a(80),d=a(116),p=a.n(d),h={},f=0,E=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"/"===e?e:function(e){var t=e,a=h[t]||(h[t]={});if(a[e])return a[e];var n=p.a.compile(e);return f<1e4&&(a[e]=n,f++),n}(e)(t,{pretty:!0})},g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e};var b=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==typeof t&&"function"!==typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!==typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},t.prototype.componentWillMount=function(){c()(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},t.prototype.componentDidMount=function(){this.isStatic()||this.perform()},t.prototype.componentDidUpdate=function(e){var t=Object(u.b)(e.to),a=Object(u.b)(this.props.to);Object(u.c)(t,a)?s()(!1,"You tried to redirect to the same route you're currently on: \""+a.pathname+a.search+'"'):this.perform()},t.prototype.computeTo=function(e){var t=e.computedMatch,a=e.to;return t?"string"===typeof a?E(a,t.params):g({},a,{pathname:E(a.pathname,t.params)}):a},t.prototype.perform=function(){var e=this.context.router.history,t=this.props.push,a=this.computeTo(this.props);t?e.push(a):e.replace(a)},t.prototype.render=function(){return null},t}(l.a.Component);b.propTypes={computedMatch:o.a.object,push:o.a.bool,from:o.a.string,to:o.a.oneOfType([o.a.string,o.a.object]).isRequired},b.defaultProps={push:!1},b.contextTypes={router:o.a.shape({history:o.a.shape({push:o.a.func.isRequired,replace:o.a.func.isRequired}).isRequired,staticContext:o.a.object}).isRequired};var v=b;t.a=v},699:function(e,t,a){"use strict";a.r(t);var n=a(1),l=a(704),r=a(702),o=a(557),i=a(559),s=a(25),m=a(35),c=a(394),u=a(59),d=a(60),p=a(63),h=a(61),f=a(64),E=a(385),g=function(e){function t(){return Object(u.a)(this,t),Object(p.a)(this,Object(h.a)(t).apply(this,arguments))}return Object(f.a)(t,e),Object(d.a)(t,[{key:"render",value:function(){var e=this.props,t=e.title,a=e.description,l=e.codeExample,r=e.children,o=e.parent,m=e.hideComponentLink,u=Object(c.a)(e,["title","description","codeExample","children","parent","hideComponentLink"]),d=null;switch(o){case"core":d="react-ocean-forms";break;case"bootstrap":d="react-ocean-forms-bootstrap";break;case"intl":d="react-ocean-forms-react-intl";break;default:throw new Error("Unsupported parent type")}var p=t.replace(/(?!^)[A-Z]/g,function(e){return"-".concat(e)}).toLowerCase();return n.createElement("div",Object.assign({className:"component-page"},u),n.createElement(s.Breadcrumb,null,n.createElement(s.BreadcrumbItem,null,"API"),n.createElement(s.BreadcrumbItem,null,d),n.createElement(s.BreadcrumbItem,{tag:"strong"},t)),n.createElement("h1",null,t," ",!m&&n.createElement(i.a,{to:"/components/".concat(o,"/").concat(p)},"(go to Showcase)")),n.createElement("p",null,a),n.createElement(E.a,{code:l}),r)}}]),t}(n.Component);g.defaultProps={hideComponentLink:!1};var b=function(e){function t(){return Object(u.a)(this,t),Object(p.a)(this,Object(h.a)(t).apply(this,arguments))}return Object(f.a)(t,e),Object(d.a)(t,[{key:"render",value:function(){var e=this.props,t=e.name,a=e.type,l=e.defaultValue,r=e.description,o=e.required,i=e.deprecated,s=e.children;return n.createElement("div",{className:"prop-info"},n.createElement("h5",{id:t},t,i?n.createElement("span",{className:"text-danger font-italic"}," deprecated"):null,o||a||l?n.createElement("br",null):null,o?n.createElement("span",{className:"text-danger font-italic"},"Required "):null,a?n.createElement("span",{className:"text-info font-weight-normal font-italic"},a):null,l?n.createElement("span",{className:"text-info font-weight-normal font-italic"},", default: ",l):null),n.createElement("div",{className:"meta"},r?n.createElement("p",null,r):"",s))}}]),t}(n.Component);b.defaultProps={required:!1,deprecated:!1};var v=a(425),y=a.n(v),w=function(){return n.createElement(g,{title:"Check",description:"Defines a bootstrap form line containing a checkbox with the label as the checkbox text. Additionally it can render an info button and info alert as well as validation messages. If the user adds the required validator then it will mark the field as required as well.",codeExample:y.a,parent:"bootstrap"},n.createElement("h2",null,"Properties"),n.createElement(b,{name:"info",type:"String"},"Message id of the info text that will be displayed along the input. If you don't want to use any i18n features you can pass a raw message instead."),n.createElement("h2",null,"Events"),n.createElement("p",null,"See ",n.createElement(i.a,{to:"../../core/field"},"Field")," for event handling."))},x=a(426),N=a.n(x),F=function(){return n.createElement(g,{title:"DatePicker",description:"Defines a bootstrap form line containing a label and a react-datetime input. Additionally it can render an info button and info alert as well as validation messages. If the user adds the required validator then it will mark the field as required as well.",codeExample:N.a,parent:"bootstrap"},n.createElement("h2",null,"Properties"),n.createElement(b,{name:"dateFormat",type:"Boolean or String",defaultValue:"true"},"Moment.js date format. See the ",n.createElement("a",{href:"https://github.com/YouCanBookMe/react-datetime#api"},"react-datetime")," api for more information."),n.createElement(b,{name:"timeFormat",type:"Boolean or String",defaultValue:"true"},"Moment.js time format. See the ",n.createElement("a",{href:"https://github.com/YouCanBookMe/react-datetime#api"},"react-datetime")," api for more information."),n.createElement(b,{name:"info",type:"String"},"Message id of the info text that will be displayed along the input. If you don't want to use any i18n features you can pass a raw message instead."),n.createElement(b,{name:"placeholder",type:"String"},"A placeholder text that will be displayed by the dropdown while nothing is selected."),n.createElement("h2",null,"Events"),n.createElement("p",null,"See ",n.createElement(i.a,{to:"../../core/field"},"Field")," for event handling."))},k=a(427),I=a.n(k),T=function(){return n.createElement(g,{title:"FormButton",description:"Defines a bootstrap button that integrates into the Form context. It will be disabled when the form is busy or disabled.",codeExample:I.a,parent:"bootstrap"},n.createElement("h2",null,"Properties"),n.createElement("p",null,"This component is just a wrapper for reactstrap buttons as a custom element inside the ",n.createElement(i.a,{to:"../../core/form-button"},"Core Form-Button"),". It will pass all props to the underlying button. Please refer to the ",n.createElement("a",{href:"https://reactstrap.github.io/components/buttons/"},"reactstrap documentation")," and the Form-Button documentation for the available props."))},O=a(428),S=a.n(O),C=function(){return n.createElement(g,{title:"Input",description:"Defines a bootstrap form line containing a label and an input. Additionally it can render an info button and info alert as well as validation messages. If the user adds the required validator then it will mark the field as required as well.",codeExample:S.a,parent:"bootstrap"},n.createElement("h2",null,"Properties"),n.createElement(b,{name:"info",type:"String"},"Message id of the info text that will be displayed along the input. If you don't want to use any i18n features you can pass a raw message instead."),n.createElement(b,{name:"prefix",type:"String or Function"},"Displays a prefix in front of the input. Supports custom components as well."),n.createElement(b,{name:"suffix",type:"String or Function"},"Displays a suffix after the input. Supports custom components as well."),n.createElement(b,{name:"type",type:"String",defaultValue:"text"},"HTML5 input type of the input element."),n.createElement("h2",null,"Events"),n.createElement("p",null,"See ",n.createElement(i.a,{to:"../../core/field"},"Field")," for event handling."))},j=a(429),V=a.n(j),B=function(){return n.createElement(g,{title:"OnOffToggleButton",description:"Defines a bootstrap button group that can be toggled between true and false.",codeExample:V.a,parent:"bootstrap"},n.createElement("h2",null,"Properties"),n.createElement(b,{name:"onLabel",type:"String",defaultValue:"ojs_togglebutton_on (On)"},'Message id of the info text that will be displayed for the "on" button. If you don\'t want to use any i18n features you can pass a raw message instead.'),n.createElement(b,{name:"offLabel",type:"String",defaultValue:"ojs_togglebutton_on (Off)"},'Message id of the info text that will be displayed for the "off" button. If you don\'t want to use any i18n features you can pass a raw message instead.'),n.createElement(b,{name:"info",type:"String"},"Message id of the info text that will be displayed along the input. If you don't want to use any i18n features you can pass a raw message instead."),n.createElement(b,{name:"prefix",type:"String or Function"},"Displays a prefix in front of the input. Supports custom components as well."),n.createElement(b,{name:"suffix",type:"String or Function"},"Displays a suffix after the input. Supports custom components as well."),n.createElement("h2",null,"Events"),n.createElement("p",null,"See ",n.createElement(i.a,{to:"../../core/field"},"Field")," for event handling."))},q=a(430),A=a.n(q),P=function(){return n.createElement(g,{title:"Select",description:"Defines a bootstrap form line containing a react-select dropdown. Additionally it can render an info button and info alert as well as validation messages. If the user adds the required validator then it will mark the field as required as well.",codeExample:A.a,parent:"bootstrap"},n.createElement("h2",null,"Properties"),n.createElement(b,{name:"options",type:"Array",required:!0},"An array of all items that can be selected. The array must contain of objects with the properties ",n.createElement("mark",null,"label")," and ",n.createElement("mark",null,"value"),"."),n.createElement(b,{name:"multi",type:"Boolean",defaultValue:"false"},"Enable/disable multiselect. See the documentation of ",n.createElement("mark",null,"react-select")," for further details."),n.createElement(b,{name:"searchable",type:"Boolean",defaultValue:"true"},"Enable/disable searchable mode. See the documentation of ",n.createElement("mark",null,"react-select")," for further details."),n.createElement(b,{name:"clearable",type:"Boolean",defaultValue:"false"},"Enable/disable clearable mode. See the documentation of ",n.createElement("mark",null,"react-select")," for further details."),n.createElement(b,{name:"placeholder",type:"String"},"A placeholder text that will be displayed by the dropdown while nothing is selected."),n.createElement(b,{name:"info",type:"String"},"Message id of the info text that will be displayed along the input. If you don't want to use any i18n features you can pass a raw message instead."),n.createElement(b,{name:"defaultValue",type:"Object:{ label: 'Option 2', value: 2 }"},"Value that will be displayed initially. You can initialize this value before rendering. You have to initialize with an object like in options. If you use defaultValue you need not use property value."),n.createElement("h2",null,"Events"),n.createElement("p",null,"See ",n.createElement(i.a,{to:"../../core/field"},"Field")," for event handling."))},L=a(431),D=a.n(L),M=function(){return n.createElement(g,{title:"ValidationSummary",description:"Displays a clickable list of errors from the current form. When an error is clicked, the corresponding input field is focused.",codeExample:D.a,parent:"bootstrap"},n.createElement("h2",null,"Properties"),n.createElement(b,{name:"id",type:"String",required:!0},"Id of this input. Will be used as the unique identifier of the div.",n.createElement("br",null),n.createElement("strong",null,"Must be unique form wide!")),n.createElement(b,{name:"title",type:"String"},"Message that will be used as the title, wrapped in a ",n.createElement("mark",null,"h4"),"."),n.createElement(b,{name:"disableFocusOnSubmit",type:"Boolean",defaultValue:"false"},"If set to true the validation summary will stop automatically scrolling to itself when the user clicks on a submit button and the form is invalid."),n.createElement("h2",null,"Events"),n.createElement("p",null,"The ",n.createElement("mark",null,"ValidationSummary")," doesn't emit any events."))},R=function(){return n.createElement(l.a,null,n.createElement(r.a,{path:"/api/bootstrap/input/",component:C}),n.createElement(r.a,{path:"/api/bootstrap/select/",component:P}),n.createElement(r.a,{path:"/api/bootstrap/check/",component:w}),n.createElement(r.a,{path:"/api/bootstrap/date-picker/",component:F}),n.createElement(r.a,{path:"/api/bootstrap/validation-summary/",component:M}),n.createElement(r.a,{path:"/api/bootstrap/form-button/",component:T}),n.createElement(r.a,{path:"/api/bootstrap/on-off-toggle-button/",component:B}),n.createElement(o.a,{from:"/api/bootstrap",to:"/api/bootstrap/input",exact:!0}),n.createElement(r.a,{path:"*",component:m.NotFound}))},_=a(432),G=a.n(_),W=function(){return n.createElement(g,{title:"FieldGroup",description:"Defines a collection of fields. It will combine its values to a sub-object and provides the possibility to attach validators to the group.",codeExample:G.a,parent:"core"},n.createElement("h2",null,"Properties"),n.createElement(b,{name:"name",type:"String",required:!0},"Name of this input. Will be used as the unique identifier of this value.",n.createElement("br",null),n.createElement("strong",null,"Must be unique inside its context (e.g. form wide or form group wide)!")),n.createElement(b,{name:"label",type:"String",required:!0},"Message id of the label that will be displayed along the input. If you don't want to use any i18n features you can pass a raw message instead."),n.createElement(b,{name:"render",type:"Function",required:!0},n.createElement("p",null,"Gets called to render its children (see render prop pattern)."),n.createElement("h6",null,"Arguments"),n.createElement("dl",{className:"row"},n.createElement("dt",{className:"col-sm-3"},"groupInfo ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(Object)")),n.createElement("dd",{className:"col-sm-9"},"Contains the group state consisting of ",n.createElement("mark",null,"fullName"),", ",n.createElement("mark",null,"isValidating"),",",n.createElement("mark",null,"valid"),", ",n.createElement("mark",null,"error")," which can be used to display those informations."))),n.createElement(b,{name:"validators",type:"Array[Function]"},n.createElement("p",null,"Contains an array of functions that will validate this input. Those functions are called whenever the value changes (on keypress, ...). They are called in order and whenever one fails the other ones are not called. The validator function must return either undefined or a string containing the message id of the validation error text."),n.createElement("p",null,"In case of a validator attached to a group, the validator will receive an object as the value parameter. This object will contain the values of the ",n.createElement(i.a,{to:"../field"},"Fields")," inside the group."),n.createElement("p",null,"react-ocean-forms ships with some sample validators. See ",n.createElement(i.a,{to:"../validators"},"Validators")," for further information.")),n.createElement(b,{name:"asyncValidators",type:"Array[Function]"},n.createElement("p",null,"Contains an array of functions that must return a Promise. Those functions are called by default onBlur, however this behaviour can be changed by setting asyncValidateOnChange on the Form. The Form will call all async validators of a Field at the same time and will wait for the result of every one of them. If one of them returns a string the field will be marked as invalid. Per default the form will wait for 400ms before triggering any validation. This is put in place so the validation won't get triggered on every keystroke of the user. The async validators will be called 400ms after the last value change."),n.createElement("p",null,"In case of a validator attached to a group, the validator will receive an object as the value parameter. This object will contain the values of the ",n.createElement(i.a,{to:"../field"},"Fields")," inside the group.")),n.createElement(b,{name:"asyncValidateOnChange",type:"Boolean",defaultValue:"form default"},"If set to true the form will trigger asynchronous validation on this field whenever it changes (e.g. on key press). Default behaviour is that the fields will only async validate when they loose focus."),n.createElement(b,{name:"asyncValidationWait",type:"Number",defaultValue:"form default"},"Configures the wait time before the async validators will be called. Per default the form will call the async validators only 400ms after the last value change."),n.createElement(b,{name:"defaultValues",type:"Object"},"Overwrites the Form default values for the child fields of this field group. Those values will be put into the according fields when the form initializes."),n.createElement(b,{name:"values",type:"Object"},"Overwrites the Form values for the child fields of this field group. Changing this property will update all Field values, overwriting their default values but also any value the user put in."),n.createElement("h2",null,"Events"),n.createElement("p",null,"The ",n.createElement("mark",null,"FieldGroup")," doesn't emit any events."))},Y=a(433),z=a.n(Y),U=function(){return n.createElement(g,{title:"Field",description:"Defines a form field which will be managed by the Form.",codeExample:z.a,parent:"core"},n.createElement("h2",null,"Properties"),n.createElement(b,{name:"name",type:"String",required:!0},"Name of this input. Will be used as the unique identifier of this value.",n.createElement("br",null),n.createElement("strong",null,"Must be unique inside its context (e.g. form wide or form group wide)!")),n.createElement(b,{name:"label",type:"String",required:!0},"Message id of the label that will be displayed along the input. If you don't want to use any i18n features you can pass a raw message instead."),n.createElement(b,{name:"component",type:"React.Component",required:!0},n.createElement("p",null,"The component that should be rendered as input."),n.createElement("p",null,"react-ocean-forms ships with an example html input implementation. For a pre-made bootstrap option take a look at ",n.createElement("mark",null,"react-ocean-forms-bootstrap"),".")),n.createElement(b,{name:"validators",type:"Array[Function]"},n.createElement("p",null,"Contains an array of functions that will validate this input. Those functions are called whenever the value changes (on keypress, ...). They are called in order and whenever one fails the other ones are not called. The validator function must return either undefined or a string containing the message id of the validation error text."),n.createElement("p",null,"react-ocean-forms ships with some sample validators. See ",n.createElement(i.a,{to:"../validators"},"Validators")," for further information.")),n.createElement(b,{name:"asyncValidators",type:"Array[Function]"},"Contains an array of functions that must return a Promise. Those functions are called by default onBlur, however this behaviour can be changed by setting asyncValidateOnChange on the Form. The Form will call all async validators of a Field at the same time and will wait for the result of every one of them. If one of them returns a string the field will be marked as invalid. Per default the form will wait for 400ms before triggering any validation. This is put in place so the validation won't get triggered on every keystroke of the user. The async validators will be called 400ms after the last value change."),n.createElement(b,{name:"asyncValidateOnChange",type:"Boolean",defaultValue:"form default"},"If set to true the form will trigger asynchronous validation on this field whenever it changes (e.g. on key press). Default behaviour is that the fields will only async validate when they loose focus."),n.createElement(b,{name:"asyncValidationWait",type:"Number",defaultValue:"form default"},"Configures the wait time before the async validators will be called. Per default the form will call the async validators only 400ms after the last value change."),n.createElement(b,{name:"defaultValue",type:"Object"},"Overwrites the Form default values for this field. This value will be used during form initialization."),n.createElement(b,{name:"value",type:"Object"},"Overwrites the Form value for this field. Changing this property will update the Field value, overwriting its default value but also any value the user put in."),n.createElement(b,{name:"Specialized properties"},n.createElement("p",null,"Depending on the input component that is used with the Field, the Field will accept a range of specialized properties to configure the behaviour of the component. Those properties are described at the according documentation of the input component."),n.createElement("p",{className:"font-weight-bold"},"The Field will pass all non-field properties directly through to the Input Component.")),n.createElement("h2",null,"Events"),n.createElement(b,{name:"onChange",type:"Function"},n.createElement("p",null,"Triggered on field value change."),n.createElement("h6",null,"Arguments"),n.createElement("dl",{className:"row"},n.createElement("dt",{className:"col-sm-3"},"value ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(any)")),n.createElement("dd",{className:"col-sm-9"},"Contains the current field value."))),n.createElement(b,{name:"onBlur",type:"Function"},n.createElement("p",null,"Triggered on field blur."),n.createElement("h6",null,"Arguments"),n.createElement("p",null,"None.")),n.createElement("h2",null,"Lifecycle Hooks"),n.createElement(b,{name:"getDisplayValue",type:"Function"},n.createElement("p",null,"Called, when the field is loading its value from the forms default values. Must return the value to display."),n.createElement("h6",null,"Arguments"),n.createElement("dl",{className:"row"},n.createElement("dt",{className:"col-sm-3"},"value ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(any)")),n.createElement("dd",{className:"col-sm-9"},"Contains the current field value."),n.createElement("dt",{className:"col-sm-3"},"meta ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(Object)")),n.createElement("dd",{className:"col-sm-9"},"Contains the properties ",n.createElement("mark",null,"disabled")," and ",n.createElement("mark",null,"plaintext"),", representing the current ",n.createElement(i.a,{to:"../form"},"Form")," setup.")),n.createElement("h6",null,"Expected return value"),n.createElement("p",null,n.createElement("strong",null,"Any")," - the function should return the value that should be displayed.")),n.createElement(b,{name:"getSubmitValue",type:"Function"},n.createElement("p",null,"Called, when the field is submitting its value to the form. Must return the value to submit."),n.createElement("h6",null,"Arguments"),n.createElement("dl",{className:"row"},n.createElement("dt",{className:"col-sm-3"},"value ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(any)")),n.createElement("dd",{className:"col-sm-9"},"Contains the current field value."),n.createElement("dt",{className:"col-sm-3"},"meta ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(Object)")),n.createElement("dd",{className:"col-sm-9"},"Contains the properties ",n.createElement("mark",null,"disabled")," and ",n.createElement("mark",null,"plaintext"),", representing the current ",n.createElement(i.a,{to:"../form"},"Form")," setup.")),n.createElement("h6",null,"Expected return value"),n.createElement("p",null,n.createElement("strong",null,"Any")," - the function should return the value that should be submitted.")),n.createElement("h2",null,"Writing your own Input Component"),n.createElement("p",null,"Please refer to the ",n.createElement(i.a,{to:"../input"},"Input")," API documentation for further information."))},H=a(434),K=a.n(H),J=function(){return n.createElement(g,{title:"FormButton",description:"Defines a button that integrates into the form context. It will be disabled when the form is busy or disabled. You can also pass submitArgs to the onSubmit handler this way.",codeExample:K.a,parent:"core"},n.createElement("h2",null,"Properties"),n.createElement(b,{name:"type",type:"String",defaultValue:"submit"},"Type of the button, either ",n.createElement("mark",null,"submit"),", ",n.createElement("mark",null,"reset")," or ",n.createElement("mark",null,"button"),"."),n.createElement(b,{name:"disabled",type:"Boolean",defaultValue:"false"},"True, if the button should be always disabled. If set to false it will be still disabled if the form context is busy or disabled."),n.createElement(b,{name:"submitArgs",type:"Object"},"Optional object that will be passed as the second parameter to ",n.createElement("mark",null,"form.onSubmit")," if the button is of ",n.createElement("mark",null,"submit")," type."),n.createElement(b,{name:"component",type:"React.Component"},"Can be used to render any other component other than the standard html ",n.createElement("mark",null,"button"),"."),n.createElement(b,{name:"Other properties"},"The FormButton will pass all non FormButton properties directly through to the rendered component."),n.createElement("h2",null,"Events"),n.createElement("p",null,"The ",n.createElement("mark",null,"FormButton")," doesn't emit any events."))},Z=a(435),Q=a.n(Z),X=a(436),$=a.n(X),ee=function(){return n.createElement(g,{title:"Form",description:"The form is the main component. It glues together all the Form logic through React's new Context api.",codeExample:Q.a,parent:"core"},n.createElement("h2",null,"Properties"),n.createElement(b,{name:"asyncValidationOnChange",type:"Boolean",defaultValue:"false"},"If set to true the form will trigger asynchronous validation on ",n.createElement(i.a,{to:"../field"},"Fields")," whenever they change (e.g. on key press). Default behaviour is that the fields will only async validate when they loose focus. Can be overriden per field."),n.createElement(b,{name:"asyncValidationWait",type:"Number",defaultValue:"400"},"Configures the wait time before the async ",n.createElement(i.a,{to:"../validators"},"validators")," will be called. Per default the form will call the async validators only 400ms after the last value change. Can be overriden per field."),n.createElement(b,{name:"className",type:"String"},"Sets the className of the html form."),n.createElement(b,{name:"defaultValues",type:"Object"},n.createElement("p",null,"Contains the default values of the form. Those values will be put into the according fields when the form initializes. Example default values object:"),n.createElement(E.a,{code:$.a})),n.createElement(b,{name:"values",type:"Object"},n.createElement("p",null,"Contains the values of the form. Changing this property will update all Field values, overwriting their default values but also any value the user put in. Example values object:"),n.createElement(E.a,{code:$.a})),n.createElement(b,{name:"disabled",type:"Boolean",defaultValue:"false"},"If set to true the form will disable all ",n.createElement(i.a,{to:"../field"},"Fields")," and ",n.createElement(i.a,{to:"../form-button"},"FormButtons"),"."),n.createElement(b,{name:"plaintext",type:"Boolean",defaultValue:"false"},"If set to true, all the fields will display only text instead of an input element. This is useful to re-use Fields in a check page."),n.createElement(b,{name:"resetOnSubmit",type:"Boolean",defaultValue:"false"},"If set to true, the form will trigger a form reset after a successful submit."),n.createElement(b,{name:"busy",type:"Boolean",defaultValue:"false"},"If set to true, the form will be forced into a busy state. Useful for example to disable the form buttons during data loading."),n.createElement(b,{name:"formatString",type:"Function"},n.createElement("p",null,"If set every text output will be put through this function. Per default an internal implementation is used. The function receives the following parameters and it must return a string."),n.createElement("h6",null,"Arguments"),n.createElement("dl",{className:"row"},n.createElement("dt",{className:"col-sm-3"},"id ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(string)")),n.createElement("dd",{className:"col-sm-9"},"Id of the message."),n.createElement("dt",{className:"col-sm-3"},"params ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(?Object)")),n.createElement("dd",{className:"col-sm-9"},"Optional parameters that should be replaced in the message.")),n.createElement("h6",null,"Expected return value"),n.createElement("p",null,n.createElement("strong",null,"String")," - the function should return a string with the message.")),n.createElement("h2",null,"Events"),n.createElement(b,{name:"onSubmit",type:"Function"},n.createElement("p",null,"Triggered when the form has been validated successfully and is ready to be submitted."),n.createElement("p",null,"If the passed function is an async function / returns a promise, then the form context will stay in a busy state until the function resolves."),n.createElement("h6",null,"Arguments"),n.createElement("dl",{className:"row"},n.createElement("dt",{className:"col-sm-3"},"values ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(Object)")),n.createElement("dd",{className:"col-sm-9"},"Contains the form values. The name of the fields are used as property names for the values object. ",n.createElement(i.a,{to:"../field-group"},"FieldGroups")," result in a nested object."),n.createElement("dt",{className:"col-sm-3"},"submitArgs ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(any)")),n.createElement("dd",{className:"col-sm-9"},"By default undefined. Can be set by ",n.createElement(i.a,{to:"../form-button"},"FormButton")," or any other manual way of calling the submit method of the form context."))),n.createElement(b,{name:"onValidate",type:"Function"},n.createElement("p",null,"Triggered after all field validations have been successfull. Provides the current values end expects an error object with the field names as properties and the errors inside those properties."),n.createElement("h6",null,"Arguments"),n.createElement("dl",{className:"row"},n.createElement("dt",{className:"col-sm-3"},"values ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(Object)")),n.createElement("dd",{className:"col-sm-9"},"Contains the form values. The name of the fields are used as property names for the values object. ",n.createElement(i.a,{to:"../field-group"},"FieldGroups")," result in a nested object.")),n.createElement("h6",null,"Expected return value"),n.createElement("p",null,n.createElement("strong",null,"?Object")," - should return null if the values are valid, otherwise an error object.")),n.createElement(b,{name:"onReset",type:"Function"},n.createElement("p",null,"Triggered when the form has been resetted by the user."),n.createElement("h6",null,"Arguments"),n.createElement("p",null,"None.")))},te=a(437),ae=a.n(te),ne=function(){return n.createElement(g,{title:"FormText",description:"Wrapper for text output. It will use the Form.stringFormatter function to output the message passed through the props. Best practice for custom input component development is to pass every text output through the stringFormatter. This enables the user of the form to add the react-ocean-forms-react-intl package and get i18n support out of the box.",codeExample:ae.a,parent:"core"},n.createElement("h2",null,"Properties"),n.createElement(b,{name:"text",type:"String",required:!0},"Id of the message."),n.createElement(b,{name:"values",type:"Object"},"Optional parameters that should be replaced in the message."))},le=a(438),re=a.n(le),oe=a(439),ie=a.n(oe),se=a(440),me=a.n(se),ce=function(){return n.createElement(g,{title:"Input",description:"Defines a form line containing a label and an input. Additionally it will render validation messages. If the user adds the required validator then it will mark the field as required as well.",codeExample:me.a,parent:"core"},n.createElement("h2",null,"Properties"),n.createElement(b,{name:"type",type:"String",defaultValue:"text"},"HTML5 input type of the input element."),n.createElement("h2",null,"Events"),n.createElement("p",null,"See ",n.createElement(i.a,{to:"../field"},"Fields")," for event handling."),n.createElement("h2",null,"Writing your own Input Component"),n.createElement("p",null,"An Input Component is just a regular React Component that gets provided with special props by the ",n.createElement(i.a,{to:"../field"},"Field"),". This makes it quite easy to write your own components, as most of the Form logic will be handled by the Field wrapper."),n.createElement("p",null,"Your component will be supplied with following form meta props, additionally to any custom props that you attach to the Field."),n.createElement(b,{name:"field",type:"Object"},n.createElement("p",null,"An object that is designed to be directly attached to the html input element."),n.createElement("h6",null,"Properties"),n.createElement("dl",{className:"row"},n.createElement("dt",{className:"col-sm-3"},"id ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(String)")),n.createElement("dd",{className:"col-sm-9"},"Unique id of the input element. The id is group-aware, meaning that it will be prefixed by the id of the containing group (if any)."),n.createElement("dt",{className:"col-sm-3"},"name ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(String)")),n.createElement("dd",{className:"col-sm-9"},"Alias for id."),n.createElement("dt",{className:"col-sm-3"},"value ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(any)")),n.createElement("dd",{className:"col-sm-9"},"Current field value. Important: the ",n.createElement(i.a,{to:"../field"},"Field")," will manage the value for you."),n.createElement("dt",{className:"col-sm-3"},"disabled ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(Boolean)")),n.createElement("dd",{className:"col-sm-9"},"True if the input should be disabled. Set by the form-wide disabled prop."),n.createElement("dt",{className:"col-sm-3"},"onChange ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(Function)")),n.createElement("dd",{className:"col-sm-9"},"Handler for the onChange event."),n.createElement("dt",{className:"col-sm-3"},"onBlur ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(Function)")),n.createElement("dd",{className:"col-sm-9"},"Handler for the onBlur event."))),n.createElement(b,{name:"meta",type:"Object"},n.createElement("p",null,"Object containing various meta information about the field state."),n.createElement("h6",null,"Properties"),n.createElement("dl",{className:"row"},n.createElement("dt",{className:"col-sm-3"},"valid ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(Boolean)")),n.createElement("dd",{className:"col-sm-9"},"True if the input is valid. Is updated through the validators results."),n.createElement("dt",{className:"col-sm-3"},"error ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(Object)")),n.createElement("dd",{className:"col-sm-9"},"Contains the current error object if the field is invalid."),n.createElement("dt",{className:"col-sm-3"},"isValidating ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(Boolean)")),n.createElement("dd",{className:"col-sm-9"},"True if the input is currently validated by an asynchronous validator. Useful for displaying e.g. spinner to indicate that a background task is active."),n.createElement("dt",{className:"col-sm-3"},"isRequired ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(Boolean)")),n.createElement("dd",{className:"col-sm-9"},"True if the input has a required validator attached."),n.createElement("dt",{className:"col-sm-3"},"touched ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(Boolean)")),n.createElement("dd",{className:"col-sm-9"},"True if the input has been touched since loading."),n.createElement("dt",{className:"col-sm-3"},"plaintext ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(Boolean)")),n.createElement("dd",{className:"col-sm-9"},"True if the ",n.createElement(i.a,{to:"../form"},"Form")," is in plaintext mode. The input should be rendered in a way that is read-only (e.g. for a reusable check page with all the user input)."),n.createElement("dt",{className:"col-sm-3"},"stringFormatter ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(Function)")),n.createElement("dd",{className:"col-sm-9"},"A function that should be used for displaying any text in the ui. Depending on the Form setup, it will either display the message as-is or will use any i18n method (if you use ",n.createElement("mark",null,"react-ocean-forms-react-intl")," for example)."))),n.createElement(b,{name:"label",type:"String"},"The label prop of the ",n.createElement(i.a,{to:"../field"},"Field"),"."),n.createElement("h5",null,"Example custom input"),n.createElement("p",null,"This is an example implentation of a very simple input component."),n.createElement(E.a,{code:re.a}),n.createElement("p",null,"Usage of your custom input:"),n.createElement(E.a,{code:ie.a}))},ue=a(441),de=a.n(ue),pe=function(){return n.createElement(g,{title:"ValidationSummary",description:"Displays a clickable list of errors from the current form. When an error is clicked, the corresponding input field is focused.",codeExample:de.a,parent:"core"},n.createElement("h2",null,"Properties"),n.createElement(b,{name:"id",type:"String",required:!0},"Id of this input. Will be used as the unique identifier of the div.",n.createElement("br",null),n.createElement("strong",null,"Must be unique form wide!")),n.createElement(b,{name:"title",type:"String"},"Message that will be used as the title, wrapped in a ",n.createElement("mark",null,"h4"),"."),n.createElement(b,{name:"disableFocusOnSubmit",type:"Boolean",defaultValue:"false"},"If set to true the validation summary will stop automatically scrolling to itself when the user clicks on a submit button and the form is invalid."),n.createElement(b,{name:"renderFieldError",type:"Function"},n.createElement("p",null,"Optional function that can be used to customize the output of each error."),n.createElement("h6",null,"Arguments"),n.createElement("dl",{className:"row"},n.createElement("dt",{className:"col-sm-3"},"id ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(String)")),n.createElement("dd",{className:"col-sm-9"},"Unique id"),n.createElement("dt",{className:"col-sm-3"},"fieldName ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(String)")),n.createElement("dd",{className:"col-sm-9"},"Name / label of the field"),n.createElement("dt",{className:"col-sm-3"},"errors ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(Object)")),n.createElement("dd",{className:"col-sm-9"},"Object / Array of objects with the rendered error messages"),n.createElement("dt",{className:"col-sm-3"},"linkCallback ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(Function)")),n.createElement("dd",{className:"col-sm-9"},"Function that should be called on click, will focus on the input element."))),n.createElement(b,{name:"render",type:"Function"},n.createElement("p",null,"Optional function that can be used to customize the ValidationSummary rendering. Note: This function will only be called when there are errors to be displayed."),n.createElement("h6",null,"Arguments"),n.createElement("dl",{className:"row"},n.createElement("dt",{className:"col-sm-3"},"children ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(Object)")),n.createElement("dd",{className:"col-sm-9"},"Object containing the rendered ValidationSummary content."))),n.createElement("h2",null,"Events"),n.createElement("p",null,"The ",n.createElement("mark",null,"ValidationSummary")," doesn't emit any events."))},he=a(442),fe=a.n(he),Ee=a(443),ge=a.n(Ee),be=a(444),ve=a.n(be),ye=a(445),we=a.n(ye),xe=a(446),Ne=a.n(xe),Fe=a(447),ke=a.n(Fe),Ie=a(448),Te=a.n(Ie),Oe=a(449),Se=a.n(Oe),Ce=function(){return n.createElement(g,{title:"Validators",description:"There are two types of validators, synchronous and asynchronous validators. Those can be attached to either a Form or a FormGroup and will get triggered automatically.",codeExample:Te.a,parent:"core",hideComponentLink:!0},n.createElement("h2",null,"Default validators"),n.createElement("p",null,n.createElement("mark",null,"react-ocean-forms")," ships with the following validators. Those only support ",n.createElement(i.a,{to:"../field"},"Fields"),", if you need ",n.createElement(i.a,{to:"../field-group"},"FieldGroup")," validators, you have to implement your own validator."),n.createElement(b,{name:"validators.required",type:"synchronous validator"},"Checks if any value is present."),n.createElement(b,{name:"validators.alphaNumeric",type:"synchronous validator"},"Checks if the input is alpha numeric."),n.createElement(b,{name:"validators.minLength",type:"synchronous validator with parameters"},"Checks if the value has a given minimum length."),n.createElement(b,{name:"validators.maxLength",type:"synchronous validator with parameters"},"Checks if the value has a given maximum length."),n.createElement("h2",null,"Validation behaviour"),n.createElement("p",null,"Validators can be triggered by three events: ",n.createElement("mark",null,"change")," or ",n.createElement("mark",null,"blur")," of a ",n.createElement(i.a,{to:"../field"},"Field"),", or ",n.createElement("mark",null,"submit")," of the ",n.createElement(i.a,{to:"../form"},"Form"),". The validation will be performed as following:"),n.createElement(b,{name:"Field.onChange"},n.createElement("ol",null,n.createElement("li",null,"Invoke the ",n.createElement("mark",null,"synchronous validators")," of a ",n.createElement(i.a,{to:"../field"},"Field"),". The validators will be called one by one, regarding of their position in the validators Array. If a validator returns an error, the subsequential validators will ",n.createElement("strong",null,"not")," be called."),n.createElement("li",null,n.createElement("p",null,"If the prop ",n.createElement("mark",null,"asyncValidateOnChange")," is set to true (either on the Field or the Form), then the Form will wait the time defined in ",n.createElement("mark",null,"asyncValidationWait")," to see if the user will change the input again."),n.createElement("p",null,"If the value didn't change and the synchronous validators are all valid, then the",n.createElement("mark",null,"asynchronous validators")," will be called. All the validators are called at the same time and the ",n.createElement(i.a,{to:"../field"},"Field")," will wait for the result of each of them.")),n.createElement("li",null,"If any of the validators return an error, the field is marked as invalid."))),n.createElement(b,{name:"Field.onBlur"},n.createElement("ol",null,n.createElement("li",null,"If the field value didn't change since the last validation and the prop ",n.createElement("mark",null,"asyncValidateOnChange"),"is true, then the validation won't be called again. This is to prevent unnecessary async validations. Otherwise:"),n.createElement("li",null,"Invoke the ",n.createElement("mark",null,"synchronous validators")," of a ",n.createElement(i.a,{to:"../field"},"Field"),". The validators will be called one by one, regarding of their position in the validators Array. If a validator returns an error, the subsequential validators will ",n.createElement("strong",null,"not")," be called."),n.createElement("li",null,"The ",n.createElement("mark",null,"asynchronous validators")," will be called. All the validators are called at the same time and the ",n.createElement(i.a,{to:"../field"},"Field")," will wait for the result of each of them."),n.createElement("li",null,"If any of the validators return an error, the field is marked as invalid."))),n.createElement(b,{name:"Form.onSubmit"},n.createElement("ol",null,n.createElement("li",null,"The form will iterate through each field and invoke the validation. The fields will immediately call both their sync and async validators."),n.createElement("li",null,"If all fields are valid, the ",n.createElement("mark",null,"Form.onValidate")," function will be called. This is a form-wide synchronous validator. If the form-wide validation returns an error, the submit will be cancelled."),n.createElement("li",null,"All the errors are displayed and the viewport will be scrolled to the ",n.createElement("mark",null,"ValidationSummary"),"."))),n.createElement(b,{name:"FieldGroups"},n.createElement(i.a,{to:"../field-group"},"FieldGroups")," behave in the same way as ",n.createElement(i.a,{to:"../field"},"Fields"),". The Fields of the Group will pass their onChange and onBlur events to the parent group, thus triggering the group-wide validation. The FieldGroup will validate no matter what the validation results of the Fields are."),n.createElement("h2",null,"Validators with parameters"),n.createElement("p",null,"If a validator needs additional parameters (like ",n.createElement("mark",null,"minLength")," and ",n.createElement("mark",null,"maxLength")," do), you can use the helper function ",n.createElement("mark",null,"validators.withParam"),". Example usage to pass the parameter 5 to the minLength validator:"),n.createElement(E.a,{code:Se.a}),n.createElement("h2",null,"Writing your own validator"),n.createElement("p",null,"You can very easily add your own validation logic by writing custom validation functions."),n.createElement(b,{name:"Custom synchronous validator"},n.createElement("p",null,"The validator function will receive the current field value and the form context, and must return undefined if the value is valid or an error with the error message."),n.createElement("h6",null,"Arguments"),n.createElement("dl",{className:"row"},n.createElement("dt",{className:"col-sm-3"},"value ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(any)")),n.createElement("dd",{className:"col-sm-9"},"Contains the current field value."),n.createElement("dt",{className:"col-sm-3"},"context ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(Object)")),n.createElement("dd",{className:"col-sm-9"},"Contains the current form context that can be used for advanced validation. See ",n.createElement(i.a,{to:"../form"},"Form")," for further information about the form context.")),n.createElement("h6",null,"Expected return value"),n.createElement("p",null,"The validator must return one of the following values:"),n.createElement("dl",{className:"row"},n.createElement("dt",{className:"col-sm-3"},n.createElement("span",{className:"text-info"},"undefined")),n.createElement("dd",{className:"col-sm-9"},"The field is valid."),n.createElement("dt",{className:"col-sm-3"},n.createElement("span",{className:"text-info"},"String")),n.createElement("dd",{className:"col-sm-9"},"The field is invalid. The string should contain either a message id, or a raw error message if you don't need i18n features."),n.createElement("dt",{className:"col-sm-3"},n.createElement("span",{className:"text-info"},"Object")),n.createElement("dd",{className:"col-sm-9"},"The field is invalid. An error object can be used instead of a String to be able to use message templates. This is useful if you use i18n and message-ids. The error object must have the following shape:",n.createElement(E.a,{code:ke.a}),"This allows you to write your error message as following:",n.createElement(E.a,{code:Ne.a}))),n.createElement("h6",null,"Simple example validator"),n.createElement("p",null,"Example implementation of an validator that checks if the input is the value 'OK'."),n.createElement(E.a,{code:we.a})),n.createElement(b,{name:"Custom required validator"},n.createElement("p",null,"You can write your own required validator. This will make the form mark the validated field as required (by default with a *). To mark your validator function as a required validator, simply flag it with ",n.createElement("mark",null,"isDefaultValidator = true"),". Currently this is only supported for synchronous validators. See ",n.createElement("mark",null,"Custom synchronous validators")," for further details."),n.createElement("h6",null,"Simple required validator"),n.createElement("p",null,"Example implementation of a required validator."),n.createElement(E.a,{code:ve.a})),n.createElement(b,{name:"Custom asynchronous validator"},n.createElement("p",null,"The validator function will receive the current field value and the form context, and must return a Promise. The promise must then resolve to undefined if the value is valid, otherwise an error with the error message. The parameters and expected return (resolved) values are the same as for ",n.createElement("mark",null,"Custom synchronous validators"),"."),n.createElement("h6",null,"Simple example validator"),n.createElement("p",null,"Example implementation of an asynchronous validator that checks the value against an api."),n.createElement(E.a,{code:fe.a})),n.createElement(b,{name:"Custom form-wide validator"},n.createElement("p",null,"The form wide validator is attached to the ",n.createElement("mark",null,"Form.onSubmit")," and is triggered when the form is submitted and all the Fields are valid. While form-wide validation is supported, it should be avoided. Try to attach your validation to Fields or FieldGroups if possible."),n.createElement("h6",null,"Arguments"),n.createElement("dl",{className:"row"},n.createElement("dt",{className:"col-sm-3"},"values ",n.createElement("span",{className:"text-info font-weight-normal font-italic"},"(Object)")),n.createElement("dd",{className:"col-sm-9"},"Contains all the field values of the form.")),n.createElement("h6",null,"Expected return value"),n.createElement("p",null,"The validator must return one of the following values:"),n.createElement("dl",{className:"row"},n.createElement("dt",{className:"col-sm-3"},n.createElement("span",{className:"text-info"},"null")),n.createElement("dd",{className:"col-sm-9"},"The form is valid."),n.createElement("dt",{className:"col-sm-3"},n.createElement("span",{className:"text-info"},"Object")),n.createElement("dd",{className:"col-sm-9"},"The form is invalid. The object must contain the error messages / objects of each invalid field.")),n.createElement("h6",null,"Simple example validator"),n.createElement("p",null,"Example implementation of an validator that does a validation form-wide."),n.createElement(E.a,{code:ge.a})))},je=function(){return n.createElement(l.a,null,n.createElement(r.a,{path:"/api/core/form/",component:ee}),n.createElement(r.a,{path:"/api/core/field/",component:U}),n.createElement(r.a,{path:"/api/core/field-group/",component:W}),n.createElement(r.a,{path:"/api/core/validation-summary/",component:pe}),n.createElement(r.a,{path:"/api/core/input/",component:ce}),n.createElement(r.a,{path:"/api/core/form-button/",component:J}),n.createElement(r.a,{path:"/api/core/form-text/",component:ne}),n.createElement(r.a,{path:"/api/core/validators/",component:Ce}),n.createElement(o.a,{from:"/api/core",to:"/api/core/form",exact:!0}),n.createElement(r.a,{path:"*",component:m.NotFound}))},Ve=a(450),Be=a.n(Ve),qe=function(){return n.createElement(g,{title:"IntlForm",description:"Drop-in replacement for regular Form component. Enables react-intl support. Must live inside a IntlProvider.",codeExample:Be.a,parent:"intl"},n.createElement("h2",null,"Properties"),n.createElement("p",null,"See ",n.createElement(i.a,{to:"../../core/form"},"Form")," for properties."),n.createElement("h2",null,"Events"),n.createElement("p",null,"See ",n.createElement(i.a,{to:"../../core/form"},"Form")," for event handling."))},Ae=function(){return n.createElement(l.a,null,n.createElement(r.a,{path:"/api/intl/intl-form/",component:qe}),n.createElement(o.a,{from:"/api/intl",to:"/api/intl/intl-form",exact:!0}),n.createElement(r.a,{path:"*",component:m.NotFound}))},Pe=function(){return n.createElement(s.Row,null,n.createElement(s.Col,{md:"8"},n.createElement(l.a,null,n.createElement(r.a,{path:"/api/core",component:je}),n.createElement(r.a,{path:"/api/bootstrap",component:R}),n.createElement(r.a,{path:"/api/intl",component:Ae}),n.createElement(o.a,{from:"/api",to:"/api/core/form",exact:!0}),n.createElement(r.a,{path:"*",component:m.NotFound}))),n.createElement(s.Col,{md:"4"},n.createElement(s.Nav,{vertical:!0},n.createElement("h6",null,"react-ocean-forms"),n.createElement(s.NavLink,{tag:i.a,to:"/api/core/form/"},"Form"),n.createElement(s.NavLink,{tag:i.a,to:"/api/core/field/"},"Field"),n.createElement(s.NavLink,{tag:i.a,to:"/api/core/field-group/"},"FieldGroup"),n.createElement(s.NavLink,{tag:i.a,to:"/api/core/validation-summary/"},"ValidationSummary"),n.createElement(s.NavLink,{tag:i.a,to:"/api/core/input/"},"Input"),n.createElement(s.NavLink,{tag:i.a,to:"/api/core/form-button/"},"FormButton"),n.createElement(s.NavLink,{tag:i.a,to:"/api/core/form-text/"},"FormText"),n.createElement(s.NavLink,{tag:i.a,to:"/api/core/validators/"},"Validators")),n.createElement(s.Nav,{vertical:!0},n.createElement("h6",{className:"mt-4"},"react-ocean-forms-bootstrap"),n.createElement(s.NavLink,{tag:i.a,to:"/api/bootstrap/input/"},"Input"),n.createElement(s.NavLink,{tag:i.a,to:"/api/bootstrap/select/"},"Select"),n.createElement(s.NavLink,{tag:i.a,to:"/api/bootstrap/check/"},"Check"),n.createElement(s.NavLink,{tag:i.a,to:"/api/bootstrap/date-picker/"},"DatePicker"),n.createElement(s.NavLink,{tag:i.a,to:"/api/bootstrap/validation-summary/"},"ValidationSummary"),n.createElement(s.NavLink,{tag:i.a,to:"/api/bootstrap/form-button/"},"FormButton"),n.createElement(s.NavLink,{tag:i.a,to:"/api/bootstrap/on-off-toggle-button/"},"OnOffToggleButton")),n.createElement(s.Nav,{vertical:!0},n.createElement("h6",{className:"mt-4"},"react-ocean-forms-react-intl"),n.createElement(s.NavItem,null,n.createElement(s.NavLink,{tag:i.a,to:"/api/intl/intl-form/"},"IntlForm")))))},Le=Pe;a.d(t,"Api",function(){return Pe}),a.d(t,"AsyncPage",function(){return Le})}}]);
//# sourceMappingURL=2.0268522f.chunk.js.map